@LOOPRES(ARG:0 = -1, ARG:1 = -1, ARG:2 = -1, ARG:3 = -1, ARG:4 = -1, ARG:5 = -1, ARG:6 = -1, ARG:7 = -1, ARG:8 = -1, ARG:9 = -1)
#FUNCTION
;式中関数「LOOPRES(LOOP RESULT)」
;DO～LOOP構文の記述を簡略化するための関数
;引数で指定された数字とRESULTを参照し、一致していれば0を返す(つまりLOOPを抜ける)
;現在同時に指定できるのは10個まで
REPEAT 10
	SIF RESULT == ARG:COUNT
		RETURNF 0
REND

RETURNF 1

@SEX, ARG
#FUNCTION
;式中関数「SEX」
;性別を判別するための関数
;引数で指定された対象の性別が、男なら1、女なら2を返す

SIF ARG == -1
	RETURNF 0

RETURNF TALENT:ARG:性別

@CHECK_CHILD_CARE, ARG = -1
#FUNCTION
;式中関数「CHECK_CHILD_CARE」
;育児室に居るかどうか判別するための関数
;引数で指定されたキャラを対象に判別する
;オリコ「くノ一忍法帖」ならスルー
SIF 受験段位名 == "くノ一忍法帖"
	RETURNF 0
SIF ARG == -1
	RETURNF 0
SIF (TALENT:ARG:妊娠 && PREG:ARG:10-5 <= DAY) || TALENT:ARG:育児中
	RETURNF 1

RETURNF 0

@PENIS, ARG
#FUNCTION
;式中関数「PENIS」
;対象にちんこ生えてるかどうか ぱんくしょんにもあったな
;ARGが-1だと0を返すので、対象や助手が居ないのに参照してエラーになることはない
SIF ARG == -1
	RETURNF 0
SIF TALENT:ARG:去勢済み
	RETURNF 0
SIF SEX(ARG) == 1 || TALENT:ARG:ふたなり
	RETURNF 1

RETURNF 0

@VAGINA, ARG
#FUNCTION
;式中関数「VAGINA」
;対象にまんこあるかどうか ぱんくしょんにもあったかどうかは知らん
;ARGが-1だと0を返すので、対象や助手が居ないのに参照してエラーになることはない
SIF ARG == -1
	RETURNF 0
SIF SEX(ARG) == 2 || TALENT:ARG:ふたなり
	RETURNF 1

RETURNF 0

@OVER_GENITAL, ARG
#FUNCTIONS
;式中関数「OVER_GENITAL」
;対象の性器を覆い隠している服は何か 一番上の服が返される 下半身上着＝全身上着＞下半身下着＞貞操帯

SIF ARG == -1
	RETURNF 

SIF TEQUIP:ARG:全身上着 && CFLAG:ARG:着衣併用 != 1
	RETURNF CSTR:ARG:全身上着

SIF TEQUIP:ARG:下半身上着
	RETURNF CSTR:ARG:下半身上着

SIF TEQUIP:ARG:下半身下着
	RETURNF CSTR:ARG:下半身下着
SIF CFLAG:ARG:貞操帯
	RETURNF "貞操帯"

@OVER_BUST, ARG
#FUNCTIONS
;式中関数「OVER_BUST」
;対象の乳房を覆い隠している服は何か 一番上の服が返される 上半身上着＝全身上着＞上半身下着

SIF ARG == -1
	RETURNF 

SIF TEQUIP:ARG:全身上着 && CFLAG:ARG:着衣併用 != 1
	RETURNF CSTR:ARG:全身上着

SIF TEQUIP:ARG:上半身上着
	RETURNF CSTR:ARG:上半身上着

SIF TEQUIP:ARG:上半身下着
	RETURNF CSTR:ARG:上半身下着

@ズリ穴作り, ARG, ARG:1
#FUNCTION
;式中関数「ズリ穴作り」
;対象ARGの服が自主的に服に穴などを作ることによりパイズリできる状態かを判別する
;ARG:1 = 0 なら通常のパイズリ ARG:1 = 1 なら縦パイズリ
;できる場合、1を返す

SIF ARG == -1
	RETURNF 0

IF TEQUIP:ARG:上半身上着 || (TEQUIP:ARG:全身上着 && CFLAG:ARG:着衣併用!=1)
	IF CFLAG:ARG:上着パイズリ == 5
		IF TEQUIP:ARG:上半身下着
			SELECTCASE CFLAG:ARG:下着パイズリ
				CASE 1
					SIF ARG:1 == 0
						RETURNF 1
				CASE 2
					SIF ARG:1 == 1
						RETURNF 1
				CASE 3
					RETURNF 1
			ENDSELECT
		ELSE
			RETURNF 1
		ENDIF
	ENDIF
ENDIF
RETURNF 0

@FALLTYPE, ARG
#FUNCTION
;式中関数「FALLTYPE」
;陥落素質のタイプ eraBEMANIでは恋慕系、淫乱系、服従系のどれか一つしか取得できないので、
;恋慕or親愛だと1 淫乱or娼婦だと2 服従or隷属だと3を返す 未陥落は0

SIF ARG == -1
	RETURNF 0

IF TALENT:ARG:恋慕 || TALENT:ARG:親愛
	RETURNF 1
ELSEIF TALENT:ARG:淫乱 || TALENT:ARG:娼婦
	RETURNF 2
ELSEIF TALENT:ARG:服従 || TALENT:ARG:隷属
	RETURNF 3
ELSE
	RETURNF 0
ENDIF

@性器露出, ARG
#FUNCTION
;式中関数「性器露出」
;単に性器が露出している状態かどうかを判別 OVER_GENITALとは少し違う(スカート系が対象にならない)

SIF ARG == -1
	RETURNF 0

SELECTCASE OVER_GENITAL(ARG)
	CASE ""
		RETURNF 1
	CASE "貞操帯"
		RETURNF 1
	CASE CSTR:ARG:下半身上着, CSTR:ARG:全身上着
		IF TEQUIP:ARG:下半身下着
			RETURNF 0
		ELSEIF CFLAG:ARG:挿入可
			RETURNF 1
		ELSE
			RETURNF 0
		ENDIF
	CASE CSTR:ARG:下半身下着
		RETURNF 0
ENDSELECT

RETURNF 0

@生殖機能♂, ARG = -1
#FUNCTION
SIF ARG == -1
	RETURNF 0

SIF TALENT:ARG:無機物
	RETURNF 0

SIF CSTR:ARG:種族 == "機械"
	RETURNF 0

SIF TALENT:ARG:ゾンビ
	RETURNF 0

SIF TALENT:ARG:去勢済み
	RETURNF 0

SELECTCASE CFLAG:ARG:精管結紮
	CASE 1
		RETURNF 0
	CASE 2
		SIF CFLAG:ARG:不妊担当魔術師 == NO:MASTER || (ASSI >= 0 && CFLAG:ARG:不妊担当魔術師 == NO:ASSI)
			RETURNF 0
ENDSELECT

RETURNF 1

@生殖機能♀, ARG = -1
#FUNCTION
SIF ARG == -1
	RETURNF 0

SIF !VAGINA(ARG)
	RETURNF 0

SIF TALENT:ARG:無機物
	RETURNF 0

SIF CSTR:ARG:種族 == "機械"
	RETURNF 0

SELECTCASE CFLAG:ARG:卵管結紮
	CASE 1
		RETURNF 0
	CASE 2
		SIF CFLAG:ARG:不妊担当魔術師 == NO:MASTER || (ASSI >= 0 && CFLAG:ARG:不妊担当魔術師 == NO:ASSI)
			RETURNF 0
ENDSELECT

RETURNF 1

@TALENTF, ARGS
#FUNCTION
#DIM DYNAMIC LCOUNT
;引数で指定した素質名の番号を返す式中関数

FOR LCOUNT, 0, VARSIZE("TALENT")
	SIF TALENTNAME:LCOUNT == ARGS
		RETURNF LCOUNT
NEXT

;#;THROW 素質名「%ARGS%」は存在しないか、表記ゆれです

@CHARANAMEF, ARG
#FUNCTIONS
;引数のキャラのNAMEを返すが、NOの範囲が1～9999じゃないと返さない プレイヤーの名前入力による予期せぬ挙動を防ぐため

SIF ARG < 0 || ARG >= CHARANUM
	RETURNF 

SELECTCASE NO:ARG
	CASE 1 TO 9999
		RETURNF NAME:ARG
	CASEELSE
		RETURNF 
ENDSELECT

@CSVNAMEF, ARG
#FUNCTIONS
;引数のキャラ番号のNAMEを返す。CSVが無い子供の場合はあらかじめ記録しておいたCHILDNAMEを返す

SELECTCASE ARG
	CASE 0 TO 9999
		SIF EXISTCSV(ARG)
			RETURNF CSVNAME(ARG)
	CASE IS < 0
		;#; THROW CSVNAMEFに負の値が渡されています
		RETURNF "[想定外の挙動]"
	CASEELSE
		RETURNF CHILDNAME:(ARG-10000)
ENDSELECT

@CSVCALLNAMEF, ARG
#FUNCTIONS
;引数のキャラ番号のCALLNAMEを返す。CSVが無い子供の場合はあらかじめ記録しておいたCHILDNAMEを返す

SELECTCASE ARG
	CASE 0 TO 9999
		SIF EXISTCSV(ARG)
			RETURNF CSVCALLNAME(ARG)
	CASE IS < 0
		;#; THROW CSVCALLNAMEFに負の値が渡されています
		RETURNF "[想定外の挙動]"
	CASEELSE
		RETURNF CHILDNAME:(ARG-10000)
ENDSELECT

@GETCHARANAME, ARGS
#FUNCTION
;GETCHARAのNAME版 上記CHARANAMEFと同じでNOの範囲が1～9999じゃないと返さない プレイヤーの名前入力による予期せぬ挙動を防ぐため

LOCAL = FINDCHARA(NAME, ARGS)

SIF LOCAL >= 0 && INRANGE(NO:LOCAL, 1, 9999)
	RETURNF LOCAL

RETURNF -1

@通貨単位
;以下パセリロゴ表示のための関数 式中関数じゃないけどほとんど式中関数みたいな使い方なので
IF FLAG:パセリ表示
	PRINT_IMG "PASELI"
ELSEIF 通貨単位 != ""
	PRINTFORM %通貨単位%
ELSE
	PRINT $
ENDIF

@PASELI, ARGS
;PRINT
#DIM DYNAMIC LCOUNT

VARSET LOCALS

SPLIT ARGS, "＄", LOCALS

FOR LCOUNT, 0, RESULT
	SIF LCOUNT >= 1
		CALL 通貨単位
	PRINTFORM %LOCALS:LCOUNT%
NEXT

@PASELIL, ARGS
;PRINTL
#DIM DYNAMIC LCOUNT

VARSET LOCALS

SPLIT ARGS, "＄", LOCALS

FOR LCOUNT, 0, RESULT
	SIF LCOUNT >= 1
		CALL 通貨単位
	PRINTFORM %LOCALS:LCOUNT%
NEXT

PRINTL 

@PASELIW, ARGS
;PRINTW
#DIM DYNAMIC LCOUNT

VARSET LOCALS

SPLIT ARGS, "＄", LOCALS

FOR LCOUNT, 0, RESULT
	SIF LCOUNT >= 1
		CALL 通貨単位
	PRINTFORM %LOCALS:LCOUNT%
NEXT

PRINTW 

@PASELIPLAIN, ARGS
;PRINTPLAIN
#DIM DYNAMIC LCOUNT

VARSET LOCALS

SPLIT ARGS, "＄", LOCALS

FOR LCOUNT, 0, RESULT
	SIF LCOUNT >= 1
		CALL 通貨単位
	PRINTPLAINFORM %LOCALS:LCOUNT%
NEXT

@TWO_DIGIT, 最大値, 単位, 最低値
#DIM 最大値
#DIMS 単位
#DIM 最低値
#DIM DYNAMIC LCOUNT
;2桁の数値を直接入力するための関数
;ARGは最大値
;ARGSは単位
;ARG:1は最低値

VARSET LOCAL, 0

PRINTL キーボードによる直接入力もできます

DO
	PRINTL
	IF LOCAL >= 10
		PRINTFORM 【 %TOFULL(TOSTR(LOCAL/10))%
	ELSE
		PRINT 【 　
	ENDIF
	PRINTFORML %TOFULL(TOSTR(LOCAL%10))% 】%単位%

	
	;一の位は100～109を入力されると決まる RESULT-100とかRESULT%100とか
	;十の位は200～290を入力されると決まる (RESULT-200)/10とか？
	FOR LCOUNT, 0, 10
		VARSET LOCALS, 
		IF 最大値 >= LCOUNT*10 && 最低値 <= LCOUNT*10
			LOCALS = <font color='#c0c0c0'><button value='{200+LCOUNT*10}'>[ {LCOUNT} ]</button></font>
		ELSE
			LOCALS = <font color='#c0c0c0'>     </font>
		ENDIF
		IF 最大値 >= LCOUNT
			LOCALS:1 = <font color='#c0c0c0'><button value='{100+LCOUNT}'>[ {LCOUNT} ]</button></font>
		ENDIF
		HTML_PRINT LOCALS+LOCALS:1
	NEXT
	PRINTBUTTON "[  決定  ]", 999
	PRINTBUTTON "[ 最大値 ]", 最大値
	PRINTBUTTON "[ 最低値 ]", 最低値
	PRINTL 
	INPUT
	
	;キーボード入力で最低値～最大値の範囲外ならそれを返す
	SIF INRANGE(RESULT, 最低値, 最大値)
		RETURN RESULT

	;決定が押されればLOCALの値を返す
	IF RESULT == 999
		CLEARLINE 1
		RETURN LOCAL
	ENDIF

	SELECTCASE RESULT
		;一の位の処理 一の位を0にしてから加算する
		CASE 100 TO 109
			LOCAL = (LOCAL/10)*10+(RESULT-100)
		;十の位の処理 十の位を0にしてから加算する
		CASE 200 TO 290
			;プレイヤーが変なの入力した時用に一の位を抹消する
			RESULT -= RESULT%10
			LOCAL = (LOCAL%10)+(RESULT-200)
	ENDSELECT
	;最低値～最大値を超えてたらそれぞれ最低値か最高値に置き換える
	SIF LOCAL > 最大値
	LOCAL = LIMIT(LOCAL, 最低値, 最大値)
	CLEARLINE 14
LOOP 1

@ISPRIME(ARG)
#FUNCTION
;素数かどうかを判定する
;素数なら1,それ以外(合成数・1以下の整数)なら0

SIF ARG < 2
	RETURNF 0
SIF ARG == 2
	RETURNF 1
SIF ARG % 2 == 0
	RETURNF 0
FOR ARG:1, 3, SQRT(ARG)+1, 2
	SIF ARG % ARG:1 == 0
		RETURNF 0
NEXT
RETURNF 1

@ISSQUARE(ARG)
#FUNCTION
;平方数(整数を2乗してできる数)なら1を返す式中関数

SIF ARG < 0
	RETURNF 0
IF ARG == SQRT(ARG)*SQRT(ARG)
	RETURNF 1
ELSE
	RETURNF 0
ENDIF

@SIGMA(ARG, ARG:1=1)
#FUNCTION
#DIM DYNAMIC LCOUNT
#DIM DYNAMIC LSUM
;約数関数
;ARGの正の約数全てをARG:1乗した総和を表す
;ARG:1が0で約数の個数、ARG:1が1で約数の総和を求める
;ARGが0のとき特例で0、ARGが負でABS(ARG)での値にマイナスをつける

SIF ARG == 0
	RETURNF 0

FOR LCOUNT, 1, ABS(ARG)+1
	SIF ABS(ARG)%LCOUNT == 0
		LSUM += POWER(LCOUNT, ARG:1)
NEXT
LSUM *= SIGN(ARG)

RETURNF LSUM

@POW4V3(ARG, ARG:1=1)
#FUNCTION
#DIM DYNAMIC LCL
;整数ARGの4/3乗を返す関数
;負の数でもエラーは吐かないようになっている
;また、結果をARG:1倍にもできる(3乗根の中で計算するので誤差があまり大きくならない)
;係数による2^63エラーの対策はとっていないので注意

IF ABS(ARG) < 9800
	LCL = CBRT( 1000 * POWER(ARG,4) * POWER(ABS(ARG:1),3) ) / 10
ELSE
	LCL = ABS(ARG) * CBRT( 1000 * ABS(ARG) * POWER(ABS(ARG:1),3) ) / 10
ENDIF
RETURNF LCL

@確率表示, ARG
;1/ARGの確率を表示
PRINTFORM 1/{ARG} ({100/ARG}.{(1000/ARG)%10}\%)

@確率表示2, ARG, ARG:1
;1/ARGまたは1/(ARG:1)が起きる確率を表示
PRINTFORM {ARG+ARG:1+1}/{ARG*ARG:1} ({ 100*(ARG+ARG:1+1)/(ARG*ARG:1) }.{ (1000*(ARG+ARG:1+1)/(ARG*ARG:1))%10 }\%)

@近親相姦, ARG, ARG:1
#FUNCTION
;近親相姦の判定用関数
;1なら兄弟姉妹間、2なら親子間、それ以外なら0

SIF ARG < 0 && ARG:1 < 0
	RETURNF 0

IF CFLAG:ARG:血縁コード >= 1 && CFLAG:ARG:血縁コード == CFLAG:(ARG:1):血縁コード
	;夫婦同士なら近親相姦じゃない
	IF GROUPMATCH(CFLAG:ARG:続柄, 1000, 1001) && GROUPMATCH(CFLAG:(ARG:1):続柄, 1000, 1001)
		RETURNF 0
	ELSEIF GROUPMATCH(CFLAG:ARG:続柄, 2000, 2001) && GROUPMATCH(CFLAG:(ARG:1):続柄, 2000, 2001)
		RETURNF 0
	ELSEIF CFLAG:ARG:続柄 >= 1000 || CFLAG:(ARG:1):続柄 >= 1000
		RETURNF 2
	ELSE
		RETURNF 1
	ENDIF
ELSE
	SIF NO:ARG >= 10000 && (CFLAG:ARG:血縁コード/100000 == NO:(ARG:1) || CFLAG:ARG:血縁コード%100000 == NO:(ARG:1))
		RETURNF 2
	SIF NO:(ARG:1) >= 10000 && (CFLAG:(ARG:1):血縁コード/100000 == NO:ARG || CFLAG:(ARG:1):血縁コード%100000 == NO:ARG)
		RETURNF 2
ENDIF

RETURNF 0


@Ｖ使用中, ARG = -1
#FUNCTION
;膣に道具入ってるかどうかの式中関数

SIF ARG == -1
	RETURNF 0

SIF TEQUIP:ARG:バイブ
	RETURNF 1
SIF TEQUIP:ARG:Ｖ異物
	RETURNF 1
SIF TEQUIP:ARG:ペニスバンド
	RETURNF 1

RETURNF 0

@V使用中, ARG = -1
#FUNCTION
;表記ゆれ（半角）にも対応

RETURNF Ｖ使用中(ARG)

@Ａ使用中, ARG = -1
#FUNCTION
;アナルに道具入ってるかどうかの式中関数

SIF ARG == -1
	RETURNF 0

SIF TEQUIP:ARG:アナルバイブ
	RETURNF 1
SIF TEQUIP:ARG:アナルビーズ
	RETURNF 1
SIF TEQUIP:ARG:浣腸器
	RETURNF 1
SIF TEQUIP:ARG:拡張バルーン
	RETURNF 1
SIF TEQUIP:ARG:アナル電極
	RETURNF 1
SIF TEQUIP:ARG:Ａ異物
	RETURNF 1
SIF TEQUIP:ARG:電動エネマグラ
	RETURNF 1
SIF TEQUIP:ARG:野外プレイ && SAVESTR:首輪 == "尻尾プラグ付き首輪"
	RETURNF 1

RETURNF 0

@A使用中, ARG = -1
#FUNCTION
;表記ゆれ（半角）にも対応

RETURNF Ａ使用中(ARG)

@Ｂ使用中, ARG = -1
#FUNCTION
;胸で道具使ってるかどうかの式中関数

SIF ARG == -1
	RETURNF 0

SIF TEQUIP:ARG:ニプルキャップ
	RETURNF 1
SIF TEQUIP:ARG:搾乳器
	RETURNF 1
SIF TEQUIP:ARG:乳房電極
	RETURNF 1

RETURNF 0

@B使用中, ARG = -1
#FUNCTION
;表記ゆれ（半角）にも対応

RETURNF Ｂ使用中(ARG)

@Ｐ使用中, ARG = -1
#FUNCTION
;ペニスに道具使ってるかどうかの式中関数

SIF ARG == -1
	RETURNF 0

SIF TEQUIP:ARG:オナホール
	RETURNF 1
SIF TEQUIP:ARG:搾精器
	RETURNF 1
SIF CFLAG:ARG:貞操帯
	RETURNF 1
SIF TEQUIP:ARG:尿道カテーテル
	RETURNF 1

RETURNF 0

@避妊具, ARG = -1
#FUNCTION
;コンドーム、搾精コンドームの使用判定

SIF ARG == -1
	RETURNF 0

SIF TEQUIP:ARG:コンドーム
	RETURNF 1
SIF TEQUIP:ARG:搾精コンドーム
	RETURNF 1

RETURNF 0

@P使用中, ARG = -1
#FUNCTION
;表記ゆれ（半角）にも対応

RETURNF Ｐ使用中(ARG)

@Ｐ使用不可, ARG = -1
#FUNCTION
;男性器使用不可の判定

SIF ARG == -1
	RETURNF 0

SIF CFLAG:ARG:貞操帯
	RETURNF 1
SIF TALENT:ARG:去勢済み
	RETURNF 1
SIF ABL:ARG:メス度 >= 10
	RETURNF 1

RETURNF 0

@Ｖ道具解除, ARG = -1
;道具解除系の関数

SIF ARG == -1
	RETURN

TEQUIP:ARG:バイブ = 0
TEQUIP:ARG:Ｖ異物 = 0
TEQUIP:ARG:ペニスバンド = 0

@Ａ道具解除, ARG = -1
;ただし野外プレイ+尻尾プラグは解除不可

SIF ARG == -1
	RETURN

TEQUIP:ARG:アナルバイブ = 0
TEQUIP:ARG:アナルビーズ = 0
TEQUIP:ARG:浣腸器 = 0
TEQUIP:ARG:拡張バルーン = 0
TEQUIP:ARG:アナル電極 = 0
TEQUIP:ARG:Ａ異物 = 0
TEQUIP:ARG:電動エネマグラ = 0

@Ｂ道具解除, ARG = -1
SIF ARG == -1
	RETURN

TEQUIP:ARG:ニプルキャップ = 0
TEQUIP:ARG:搾乳器 = 0
TEQUIP:ARG:乳房電極 = 0

@Ｐ道具解除, ARG = -1
SIF ARG == -1
	RETURN

TEQUIP:ARG:オナホール = 0
TEQUIP:ARG:搾精器 = 0

@GETPALAM, ARGS
#FUNCTION
;GETNUM(PALAM, "STR")をさらに簡略化したもの。ABL上昇処理で頻繁に使用しているのでPALAM用に作った
;GETPALAMLVではない

;#;SIF GETNUM(PALAM, ARGS) == -1
;#;	THROW 能力名「%ARGS%」は存在しないか、表記ゆれです

RETURNF GETNUM(PALAM, ARGS)

@GETEXP, ARGS
#FUNCTION
;GETNUM(EXP, "STR")をさらに簡略化したもの。ABL上昇処理で頻繁に使用しているのでEXP用に作った
;GETEXPLVではない

;#;SIF GETNUM(EXP, ARGS) == -1
;#;	THROW 経験名「%ARGS%」は存在しないか、表記ゆれです

RETURNF GETNUM(EXP, ARGS)

@SET_TOOLTIP, 本文, ツールチップ, ボタン化 = 1, 文字色
#FUNCTIONS
#DIMS DYNAMIC 本文
#DIMS DYNAMIC ツールチップ
#DIMS DYNAMIC タグ
;ボタンの数値が指定されたボタン番号と一致すると困るので、ボタン化されなさそうな数値に 元ネタ分かる人はすごい
#DIM DYNAMIC ボタン = -3189415
#DIMS DYNAMIC 文字列ボタン
#DIM DYNAMIC ボタン化
#DIMS DYNAMIC 文字色
;第一引数に第二引数のツールチップ付けたHTML_PRINT用の完成されたタグを返す式中関数
;"[]"で囲った部分があれば自動でボタン化する
;ボタン化フラグを0にすればボタン化しない

VARSET LOCAL

;STRCOUNTの使い方がわからない
LOCAL = STRFINDU(本文, "[")
LOCAL:1 = STRFINDU(本文, "]")

IF LOCAL != -1 && LOCAL:1 != -1
	;STRFIND系使うと"[～]"の範囲を取得してるので"["と"]"を省くために+1と-1する
	文字列ボタン = %SUBSTRINGU(本文, LOCAL+1, LOCAL:1-LOCAL-1)%
	SIF ISNUMERIC(文字列ボタン)
		ボタン = TOINT(文字列ボタン)
ENDIF

;文字色指定してればその文字色で
IF 文字色 != ""
	タグ = <font color='%文字色%'>
ELSE
	タグ = <font color='#%CONVERT(GETCOLOR(), 16)%'>
ENDIF

SIF !ボタン化
	GOTO NONBUTTON

;紛らわしいけどtitleがツールチップなんだよなぁ
IF ボタン != -3189415
	IF ツールチップ非表示
		タグ += @"<button value ='{ボタン}'>%本文%</button></font>"
	ELSE
		タグ += @"<button value ='{ボタン}' title = '%ツールチップ%'>%本文%</button></font>"
	ENDIF
ELSEIF 文字列ボタン != ""
	IF ツールチップ非表示
		タグ += @"<button value ='%文字列ボタン%'>%本文%</button></font>"
	ELSE
		タグ += @"<button value ='%文字列ボタン%' title = '%ツールチップ%'>%本文%</button></font>"
	ENDIF
ELSE
	$NONBUTTON
	IF ツールチップ非表示
		タグ += @"<nonbutton>%本文%</nonbutton></font>"
	ELSE
		タグ += @"<nonbutton title = '%ツールチップ%'>%本文%</nonbutton></font>"
	ENDIF
ENDIF

;RESETCOLOR

RETURNF タグ

@SET_TOOLTIPBUTTON, 本文, 文字列ボタン, ツールチップ, 文字色
#FUNCTIONS
#DIMS DYNAMIC 本文
#DIMS DYNAMIC ツールチップ
#DIMS DYNAMIC タグ
;ボタンの数値が指定されたボタン番号と一致すると困るので、ボタン化されなさそうな数値に 元ネタ分かる人はすごい
#DIM DYNAMIC ボタン = -3189415
#DIMS DYNAMIC 文字列ボタン
#DIM DYNAMIC ボタン化
#DIMS DYNAMIC 文字色
;PRINTBUTTONのツールチップ付与版
;PRINTBUTTONと同じ使い方に加え、第三引数のツールチップ付けたHTML_PRINT用の完成されたタグを返す式中関数
;ただしPRINTBUTTONとは違い、第二引数がINT型であってもダブルクォーテーションて括らなければならない

VARSET LOCAL

SIF ISNUMERIC(文字列ボタン)
	ボタン = TOINT(文字列ボタン)

;文字色指定してればその文字色で
IF 文字色 != ""
	タグ = <font color='%文字色%'>
ELSE
	タグ = <font color='#%CONVERT(GETCOLOR(), 16)%'>
ENDIF

;紛らわしいけどtitleがツールチップなんだよなぁ
IF ボタン != -3189415
	IF ツールチップ非表示
		タグ += @"<button value ='{ボタン}'>%本文%</button></font>"
	ELSE
		タグ += @"<button value ='{ボタン}' title = '%ツールチップ%'>%本文%</button></font>"
	ENDIF
ELSEIF 文字列ボタン != ""
	IF ツールチップ非表示
		タグ += @"<button value ='%文字列ボタン%'>%本文%</button></font>"
	ELSE
		タグ += @"<button value ='%文字列ボタン%' title = '%ツールチップ%'>%本文%</button></font>"
	ENDIF
ENDIF

;RESETCOLOR

RETURNF タグ

@PAGING, 表示, 追加情報, ページ名, 終了表記, 使用不可も表示
#DIM ページ数
#DIM 表示数
#DIM 飛ばした人数
#DIM 未表示キャラ
#DIM 表示行数
#DIM 選択可能, 10000
#DIM 初期化フラグ
#DIM DYNAMIC LCOUNT
#DIM DYNAMIC 表示
#DIM DYNAMIC 使用不可も表示
#DIM DYNAMIC クジャクアイ
#DIMS DYNAMIC 追加情報
#DIMS DYNAMIC ページ名
#DIMS DYNAMIC 終了表記
;引数の条件に一致するキャラをページ形式で表示する
;詳しくは資料フォルダの雑記.txtを参照

LCOUNT = PAGING

IF 初期化フラグ == 0
	VARSET 選択可能
	飛ばした人数 = 0
	表示数 = 0
	未表示キャラ = 0
	表示行数 = LINECOUNT
	初期化フラグ = 1
ENDIF

IF 表示 && (使用不可も表示 || !CFLAG:PAGING:使用不可)
	;2ページ目以降はページ数×10まで表示を飛ばす
	IF 飛ばした人数 < ページ数*10
		飛ばした人数++
		RETURN 0
	ENDIF

	表示数++
	;10人表示したら未表示キャラが居るフラグ立ててページ終わり
	IF 表示数 > 10
		未表示キャラ = 1
	ELSE
		;健康診断は色変えしたいので特別な処理
		IF 追加情報 == "健康診断用"
			PRINTFORM 　[{LCOUNT, 2, RIGHT}] - %NAMEDISP(LCOUNT), 26, LEFT% \@ SEX(LCOUNT) == 1 ? ♂ # ♀ \@ 体力%BARBASE("体力", PAGING, 10), 23, LEFT% 気力%BARBASE("気力", PAGING, 10), 23, LEFT% ストレス値:
			;孔雀の瞳を持ってるキャラが主人・助手・担当医に居るかを見る
			SIF TALENT:MASTER:孔雀の瞳
				クジャクアイ = 1
			SIF ASSI > 0 && TALENT:ASSI:孔雀の瞳
				クジャクアイ = 1
			FOR LCOUNT, 0, CHARANUM
				SIF CSTR:LCOUNT:配属 == "医務室" && TALENT:LCOUNT:孔雀の瞳
					クジャクアイ = 1
			NEXT
			LCOUNT = PAGING
			IF クジャクアイ
				SELECTCASE CFLAG:LCOUNT:ストレス値
					CASE 1 TO 99
						SETCOLORBYNAME lime
					CASE 100 TO 299
						SETCOLORBYNAME yellow
					CASE 300 TO 499
						SETCOLORBYNAME red
					CASE IS >= 500
						SETCOLORBYNAME darkred
				ENDSELECT
				PRINTFORML {CFLAG:LCOUNT:ストレス値}/999
			ELSE
				SELECTCASE CFLAG:LCOUNT:ストレス値
					CASE 0
						PRINTL 無
					CASE 1 TO 99
						SETCOLORBYNAME lime
						PRINTL 低
					CASE 100 TO 299
						SETCOLORBYNAME yellow
						PRINTL 中
					CASE 300 TO 499
						SETCOLORBYNAME red
						PRINTL 高
					CASE IS >= 500
						SETCOLORBYNAME darkred
						PRINTL 過多
				ENDSELECT
				RESETCOLOR
			ENDIF
			選択可能:LCOUNT = 1
		ELSE
			PRINTFORML 　[{LCOUNT, 2, RIGHT}] - %NAMEDISP(LCOUNT), 30, LEFT% \@ SEX(LCOUNT) == 1 ? ♂ # ♀ \@ %追加情報%
			選択可能:LCOUNT = 1
		ENDIF
	ENDIF
ENDIF

;表示数が10人になるか全キャラ表示したら入力受け付け
IF 表示数 > 10 || LCOUNT == CHARANUM-1
	;表示できるキャラが居ない場合
	IF 表示数 == 0
		DRAWLINE
		PRINTL 　表示できるキャラが居ません
	ENDIF
	DRAWLINE
	初期化フラグ = 0
	IF ページ名 == ""
		PRINTPLAINFORM 　PAGE.{ページ数+1}　
	ELSE
		PRINTPLAINFORM 　%ページ名%　
	ENDIF
	IF ページ数 > 0
		PRINTLC [999]前ページ
	ELSE
		PRINTLC  
	ENDIF
	IF 終了表記 == ""
		PRINTLC [1000] 戻る　
	ELSE
		PRINTFORMLC [1000] %終了表記%　
	ENDIF
	;表示できるキャラがまだ居れば次ページ
	SIF 未表示キャラ
		PRINTLC [1001]次ページ
	PRINTL 
	DO
		INPUT
		SELECTCASE RESULT
			CASE 999
				SIF ページ数 > 0
					ページ数--
				PAGING = -1
				CLEARLINE LINECOUNT-表示行数
				RETURN 0
			CASE 1000
				PAGING = CHARANUM
				ページ数 = 0
				RETURN -1
			CASE 1001
				;表示できるキャラがまだ居れば次ページ
				SIF 未表示キャラ
					ページ数++
				PAGING = -1
				CLEARLINE LINECOUNT-表示行数
				RETURN 0
			CASEELSE
				SIF !選択可能:RESULT
					CONTINUE
				PAGING = CHARANUM
				ページ数 = 0
				RETURN RESULT
		ENDSELECT
	LOOP 1
ENDIF

@REF_DIFF, 比較元, 比較先, 条件 = "UP"
#DIM DYNAMIC REF 比較元
#DIM DYNAMIC 比較先
#DIMS DYNAMIC 条件
;第一引数(比較元)と第二引数(比較先)を比較して、条件で指定した動作を行う
;条件=UPの場合 - 比較先が比較元より大きい数だった場合は比較元を同じ値にする
;条件=DOWNの場合 - 比較先が比較元より小さい数だった場合は比較元を同じ値にする
;条件を指定しない場合はUPの動作 参照型変数なので比較元はこの関数内で変更される

SELECTCASE 条件
	CASE "UP"
		SIF 比較元 < 比較先
			比較元 = 比較先
	CASE "DOWN"
		SIF 比較元 > 比較先
			比較元 = 比較先
ENDSELECT

@SETMIN, 比較元, 比較先
#DIM DYNAMIC REF 比較元
#DIM DYNAMIC 比較先
;上記REF_DIFFの改良版 第一引数が第二引数より大きい場合は第二引数の値に合わせる

SIF 比較元 > 比較先
	比較元 = 比較先

@SETMAX, 比較元, 比較先
#DIM DYNAMIC REF 比較元
#DIM DYNAMIC 比較先
;上記SETMINのMAX版

SIF 比較元 < 比較先
	比較元 = 比較先

@BARBASE, ARGS, ARG = -1, ARG:1 = 32
#FUNCTIONS
;BASEのBARを表示する汎用関数
;指定が無ければ32分

SIF ARG == -1
	ARG = TARGET
SIF ARG == -1
	RETURNF 

SIF MAXBASE:ARG:ARGS > 0
	RETURNF @"%BARSTR(BASE:ARG:ARGS, MAXBASE:ARG:ARGS, ARG:1)%({BASE:ARG:ARGS}/{MAXBASE:ARG:ARGS})"

@SETBASE, ARG
;対象のBASEがMAXBASEより高かったり0より低かったりしたら合わせる関数
;体力気力魔力のみ
BASE:ARG:体力 = LIMIT(BASE:ARG:体力, 0, MAXBASE:ARG:体力)
BASE:ARG:気力 = LIMIT(BASE:ARG:気力, 0, MAXBASE:ARG:気力)
BASE:ARG:魔力 = LIMIT(BASE:ARG:魔力, 0, MAXBASE:ARG:魔力)

@SLINEWAIT, ARGS
#DIM DYNAMIC LCOUNT, 2
;改行しないウェイトする関数 大犬口上から本体に移動

VARSET LOCALS, 

SPLIT ARGS, "Ｗ", LOCALS

LOCALS = %HTML_POPPRINTINGSTR()%%LOCALS%

FOR LCOUNT, 0, RESULT
	IF LCOUNT >= 1
		WAIT
		CLEARLINE 1
	ENDIF
	FOR LCOUNT:1, 0, LCOUNT+1
		PRINTFORM %LOCALS:(LCOUNT:1)%
	NEXT
NEXT
PRINTW 

@CHECKDRAWLINE
;現在表示してる最後の行がDRAWLINE行かどうかをチェックし、そうでなければDRAWLINEを引く関数

SIF HTML_TOPLAINTEXT(HTML_GETPRINTEDSTR(0)) != DRAWLINESTR
	DRAWLINE

@CHECKDRAWLINEW
;上記CHECKDRAWLINEのWAIT付き版

IF HTML_TOPLAINTEXT(HTML_GETPRINTEDSTR(0)) != DRAWLINESTR
	WAIT
	DRAWLINE
ENDIF

@GETNO, 名前
#FUNCTION
#DIMS DYNAMIC 名前
#DIMS 名前保存用, 20000
#DIM DYNAMIC LCOUNT
;引数のNAMEのキャラのNOを返す 子供にも対応しているが、同姓同名のキャラが入れば番号が若い方が優先される

IF 名前保存用 == ""
	FOR LCOUNT, 0, 20000
		SELECTCASE LCOUNT
			CASE 0 TO 9999
				SIF EXISTCSV(LCOUNT)
					名前保存用:LCOUNT = %CSVNAME(LCOUNT)%
			CASE IS > 10000
				SIF CHILDNAME:(LCOUNT-10000) == ""
					BREAK
				名前保存用:LCOUNT = %CHILDNAME:(LCOUNT-10000)%
		ENDSELECT
	NEXT
ENDIF

;#;SIF FINDELEMENT(名前保存用, ESCAPE(名前), 0, VARSIZE("名前保存用"), 1) == -1
;#;	THROW 「%名前%」というキャラは存在しないか、表記揺れです

RETURNF FINDELEMENT(名前保存用, ESCAPE(名前), 0, VARSIZE("名前保存用"), 1)

@ストレス表示, ARG
;ストレス値の表示

SIF ARG == -1
	RETURN

SELECTCASE CFLAG:ARG:ストレス値
	CASE 1 TO 99
		SETCOLORBYNAME lime
	CASE 100 TO 299
		SETCOLORBYNAME yellow
	CASE 300 TO 499
		SETCOLORBYNAME red
	CASE IS >= 500
		SETCOLORBYNAME darkred
ENDSELECT
PRINTFORM {CFLAG:ARG:ストレス値}/999
RESETCOLOR

@難易度, ARG
#FUNCTIONS
;難易度を単語で返す

SIF ARG == 0
	ARG = FLAG:難易度

IF QMA
	SELECTCASE ARG
		CASE 1
			RETURNF "フェアリー級"
		CASE 2
			RETURNF "ミノフェニ級"
		CASE 3
			RETURNF "ドラゴン級"
	ENDSELECT
ELSE
	SELECTCASE ARG
		CASE 1
			RETURNF "NORMAL"
		CASE 2
			RETURNF "HYPER"
		CASE 3
			RETURNF "ANOTHER"
	ENDSELECT
ENDIF

@天気, ARG
#FUNCTIONS
;天気を単語で返す

SIF ARG == 0
	ARG = FLAG:天気

SELECTCASE ARG
	CASE 1
		RETURNF "晴れ"
	CASE 2
		RETURNF "曇り"
	CASE 3
		RETURNF "雨"
	CASE 4
		RETURNF "大雨"
	CASE 5
		RETURNF "雷雨"
	CASE 6
		RETURNF "雪"
	CASE 7
		RETURNF "大雪"
ENDSELECT

@月齢, ARG = -1
#FUNCTIONS
;月齢を単語で返す

SIF ARG == -1
	ARG = 月齢

SELECTCASE ARG
	CASE 0 TO 199
		RETURNF "新月"
	CASE 200 TO 299
		RETURNF "繊月"
	CASE 300 TO 699
		RETURNF "三日月"
	CASE 700 TO 999
		RETURNF "上弦の月"
	CASE 1000 TO 1399
		RETURNF "十日夜"
	CASE 1400 TO 1499
		RETURNF "小望月"
	CASE 1500 TO 1599
		RETURNF "満月"
	CASE 1600 TO 1699
		RETURNF "十六夜"
	CASE 1700 TO 1799 
		RETURNF "立待月"
	CASE 1800 TO 1899
		RETURNF "居待月"
	CASE 1900 TO 1999
		RETURNF "寝待月"
	CASE 2000 TO 2299
		RETURNF "二十日月"
	CASE 2300 TO 2599
		RETURNF "下弦の月"
	CASE 2600 TO 2899
		RETURNF "暁月"
	CASE 2900 TO 3000
		RETURNF "三十日月"
ENDSELECT

@ゲームモード, ARG = -1
#FUNCTIONS
;ゲームモードを単語で返す

SIF ARG == -1
	ARG = FLAG:ゲームモード

SELECTCASE ARG
	CASE 0
		RETURNF "通常モード"
	CASE 1
		RETURNF "経営モード"
	CASE 2
		RETURNF "学園モード"
	CASE 7
		RETURNF "新婚モード"
	CASE 8
		RETURNF "段位認定"
	CASE 9
		RETURNF "フリーモード"
ENDSELECT
	

@日付表示
#DIM DYNAMIC LCOUNT
;現在の日付を「XX年XX月XX日(X曜日) 祝日(あれば) XX日目」の形式でPRINTする

IF LANGUAGE == "ENG"
	SELECTCASE MONTH
		CASE 1
			PRINT January 
		CASE 2
			PRINT February 
		CASE 3
			PRINT March 
		CASE 4
			PRINT April 
		CASE 5
			PRINT May 
		CASE 6
			PRINT June 
		CASE 7
			PRINT July 
		CASE 8
			PRINT August 
		CASE 9
			PRINT September 
		CASE 10
			PRINT October 
		CASE 11
			PRINT November 
		CASE 12
			PRINT December 
	ENDSELECT

	PRINTFORM {DAYS}, 
	IF YEAR > 0
		PRINTFORM {YEAR}
	ELSE
		PRINTFORM BC{ABS(YEAR)+1}
	ENDIF
	PRINTFORM (%DOWDISP(FLAG:曜日)%) 
ELSE
	IF YEAR > 0
		PRINTFORM {YEAR}
	ELSE
		PRINTFORM BC{ABS(YEAR)+1}
	ENDIF
	PRINTFORM 年{MONTH}月{DAYS}日(%DOW(FLAG:曜日)%) 
ENDIF

IF LANGUAGE == "JP"
	FOR LCOUNT, 0, 5
		SIF HOLIDAY:LCOUNT == ""
			BREAK
		PRINTFORM %HOLIDAY:LCOUNT% 
	NEXT
ENDIF

IF LANGUAGE == "ENG"
	IF ゲームモード() == "学園モード"
		PRINTFORM Day {DAY}
		SELECTCASE ターン
			CASE "朝"
				PRINT (Morning) 
			CASE "昼"
				PRINT (Noon) 
			CASE "夜"
				PRINT (Evening) 
		ENDSELECT
	ELSE
		PRINTFORM Day {DAY}(\@ TIME == 0 ? Noon # Evening \@) 
	ENDIF
ELSE
	IF ゲームモード() == "学園モード"
		PRINTFORM {DAY}日目(%ターン%) 
	ELSE
		PRINTFORM {DAY}日目(\@ TIME == 0 ? 昼 # 夜 \@) 
	ENDIF
ENDIF

@ゲームモード表示
;ゲームモードをPRINTする

SELECTCASE FLAG:ゲームモード
	CASE 0
		PRINT  MODE:STANDARD
	CASE 1
		PRINT  MODE:STRATEGY
	CASE 2
		PRINT  MODE:SCHOOL
	CASE 7
		PRINT  MODE:新婚生活
	CASE 8
		PRINT  MODE:段位認定 
		CALL GRADE, FLAG:選択段位
	CASE 9
		PRINT  MODE:PREMIUM FREE
ENDSELECT

@性別表示, ARG = -1
#FUNCTIONS
;性別の表記を返す

SIF ARG == -1
	ARG = TARGET
SIF ARG == -1
	RETURNF 

IF TALENT:ARG:性転換済
	IF LANGUAGE == "ENG"
		SELECTCASE SEX(ARG)
			CASE 1
				RETURNF "(♀→♂)"
			CASE 2
				RETURNF "(♂→♀)"
		ENDSELECT
	ELSE
		SELECTCASE SEX(ARG)
			CASE 1
				RETURNF "(元♀の♂)"
			CASE 2
				RETURNF "(元♂の♀)"
		ENDSELECT
	ENDIF
ELSE
	SELECTCASE SEX(ARG)
		CASE 1
			RETURNF "(♂)"
		CASE 2
			RETURNF "(♀)"
	ENDSELECT
ENDIF

@ゲーム開始日, ARG
#FUNCTIONS
;リアルタイムでゲームを始めた日を返す

RETURNF @"{REALTIME:0}年{REALTIME:1}月{REALTIME:2}日"

@GET_STAIN, ARG, 汚れ:0, 汚れ:1, 汚れ:2, 汚れ:3, 汚れ:4, 汚れ:5, 汚れ:6, 汚れ:7
#FUNCTION
#DIM DYNAMIC LCOUNT
#DIMS DYNAMIC 汚れ, 8
;渡されたSTAINに指定された汚れがあるかを返す関数

FOR LCOUNT, 0, 8
	IF GETBIT(ARG, LCOUNT)
		SELECTCASE LCOUNT
			CASE 0
				SIF FINDELEMENT(汚れ, "愛液") >= 0
					RETURNF 1
			CASE 1
				SIF FINDELEMENT(汚れ, "先走り") >= 0
					RETURNF 1
			CASE 2
				SIF FINDELEMENT(汚れ, "精液") >= 0
					RETURNF 1
			CASE 3
				SIF FINDELEMENT(汚れ, "アナル") >= 0
					RETURNF 1
			CASE 4
				SIF FINDELEMENT(汚れ, "母乳") >= 0
					RETURNF 1
			CASE 5
				SIF FINDELEMENT(汚れ, "粘液") >= 0
					RETURNF 1
			CASE 6
				SIF FINDELEMENT(汚れ, "破瓜血") >= 0
					RETURNF 1
			CASE 7
				SIF FINDELEMENT(汚れ, "尿") >= 0
					RETURNF 1
		ENDSELECT
	ENDIF
NEXT

RETURNF 0

@DIG_SEP, ARGS
#FUNCTION
;Digit Separator(桁区切り)関数
;大きな数字を扱うとき桁を区切っても使えるようにする
;実情はREPLACEの正規表現で数字以外を消してるのでどんな滅茶苦茶な区切りでも使える

REPLACE ARGS, "[^0-9]", ""

RETURNF TOINT(RESULTS)

@TODIGSEP, 数値
#FUNCTIONS
#DIMS DYNAMIC 返り値
#DIM DYNAMIC 数値
;数字に3桁区切りコンマを挿入する関数

SIF 数値 > 999
	返り値 += TODIGSEP(数値/1000)+","

;上記処理を通ってきた場合は下三桁に0補完を行う
IF 返り値 != ""
	RETURNF @"%返り値%\@ 数値%1000 < 100 ? 0 #\@\@ 数値%1000 < 10 ? 0 #\@{数値%1000}"
ELSE
	RETURNF TOSTR(数値%1000)
ENDIF

@TONUM, 区切り対象
#FUNCTION
#DIM DYNAMIC 返り値
#DIMS DYNAMIC 区切り対象
#DIMS DYNAMIC エラー通知用
エラー通知用 = %区切り対象%
;漢字桁を数字に変換する

IF STRFIND(区切り対象, "京") > 0
	SPLIT 区切り対象, "京", LOCALS
	返り値 += TOINT(LOCALS)*DIG_SEP("10,000,000,000,000,000")
	区切り対象 = %LOCALS:1%
ENDIF
IF STRFIND(区切り対象, "兆") > 0
	SPLIT 区切り対象, "兆", LOCALS
	返り値 += TOINT(LOCALS)*DIG_SEP("1,000,000,000,000")
	区切り対象 = %LOCALS:1%
ENDIF
IF STRFIND(区切り対象, "億") > 0
	SPLIT 区切り対象, "億", LOCALS
	返り値 += TOINT(LOCALS)*DIG_SEP("100,000,000")
	区切り対象 = %LOCALS:1%
ENDIF
IF STRFIND(区切り対象, "万") > 0
	SPLIT 区切り対象, "万", LOCALS
	返り値 += TOINT(LOCALS)*DIG_SEP("10,000")
	区切り対象 = %LOCALS:1%
ENDIF

;#;SIF ISNUMERIC(区切り対象)
;#; THROW 「%エラー通知用%」は正常に変換できません

返り値 += DIG_SEP(区切り対象)

RETURNF 返り値

@TO漢字, 変換対象
#FUNCTIONS
#DIMS DYNAMIC 返り値
#DIM DYNAMIC 変換対象
;数字を漢字桁に変換する 頭の悪い関数名

SIF 変換対象 == 0
	RETURNF "0"

IF 変換対象 >= DIG_SEP("10,000,000,000,000,000")
	返り値 += @"%TOSTR(変換対象/DIG_SEP("10,000,000,000,000,000"))%京"
	変換対象 %= DIG_SEP("10,000,000,000,000,000")
ENDIF
IF 変換対象 >= DIG_SEP("1,000,000,000,000")
	返り値 += @"%TOSTR(変換対象/DIG_SEP("1,000,000,000,000"))%兆"
	変換対象 %= DIG_SEP("1,000,000,000,000")
ENDIF
IF 変換対象 >= DIG_SEP("100,000,000")
	返り値 += @"%TOSTR(変換対象/DIG_SEP("100,000,000"))%億"
	変換対象 %= DIG_SEP("100,000,000")
ENDIF
IF 変換対象 >= DIG_SEP("10,000")
	返り値 += @"%TOSTR(変換対象/DIG_SEP("10,000"))%万"
	変換対象 %= DIG_SEP("10,000")
ENDIF
SIF 変換対象 > 0
	返り値 += TOSTR(変換対象)

RETURNF 返り値

@DIV10, ARG
#FUNCTIONS
;DIVIDE10 10で割って小数点付ける関数 マイナスにも対応 ほぼ気温表示用

RETURNF @"{ARG/10}.{ABS(ARG%10)}"

@DIV100, ARG
#FUNCTIONS
;DIVIDE100 100で割って小数点付ける関数 ほぼ月齢表示用

RETURNF @"{ARG/100}.\@ABS(ARG%100) < 10 ? 0 # \@{ABS(ARG%100)}"

@性別選択, ARG
;性別不明キャラの性別選択巻数

SELECTCASE CHARANAMEF(ARG)
	CASE "サタン-P*L-イヴリース", "ファントム", "ヨミ"
		;SKIPDISP中ならランダムにしてみる
		SIF ISSKIP()
			GOTOFORM GENDER_{RAND(1, 3)}
		PRINTFORML %CHARANAMEF(ARG)%の性別を選択してください
		PRINTL [1] - 男の子
		PRINTL [2] - 女の子
		DO
			INPUT
			SELECTCASE RESULT
				CASE 1
					$GENDER_1
					TALENT:ARG:性別 = 1
					TALENT:ARG:童貞 = 1
				CASE 2
					$GENDER_2
					TALENT:ARG:性別 = 2
					TALENT:ARG:処女 = 1
					TALENT:ARG:バストサイズ = 1
			ENDSELECT
			SIF ISSKIP()
				BREAK
		LOOP LOOPRES(1, 2)
ENDSELECT

RETURN

@ISTALENT, キャラ, 素質名, 括弧
#DIM DYNAMIC キャラ
#DIMS DYNAMIC 素質名
#DIMS DYNAMIC 括弧
;ISTALENT 指定したキャラに指定した素質がある場合は素質名をPRINTする
;括弧を指定可能 デフォルトは[]

IF GETNUM(TALENT, 素質名) == -1
	;#;THROW 素質「%素質名%」は存在しないか、表記ゆれです
	RETURN
ENDIF

IF TALENT:キャラ:素質名
	IF 括弧 != ""
		PRINTFORM %CHARATU(括弧, 0)%%素質名%%CHARATU(括弧, 1)%
	ELSE
		PRINTFORM [%素質名%]
	ENDIF
ENDIF

RETURN

;BGMのフェードアウト用関数 0.5秒使ってフェードアウトする
@FADEOUTBGM

SIF !サウンド
	RETURN

;SETBGMVOLUME BGM音量/5*4
TWAIT 100, 0

;SETBGMVOLUME BGM音量/5*3
TWAIT 100, 0

;SETBGMVOLUME BGM音量/5*2
TWAIT 100, 0

;SETBGMVOLUME BGM音量/5*1
TWAIT 100, 0

;SETBGM
TWAIT 100, 0

;SETBGMVOLUME BGM音量

;100分率で(引数)%で1を返す
@RANDPER, 確率
#FUNCTION
#DIM DYNAMIC 確率

IF RAND(1, 101) <= 確率
	RETURNF 1
ELSE
	RETURNF 0
ENDIF

;色付きでPRINTしてからRESETCOLORする 引数はBYNAME
@PRINTCOLOR, ARGS, 色名
#DIMS DYNAMIC 色名

IF COLOR_FROMNAME(色名) == -1
	RESETCOLOR
ELSE
	SETCOLOR COLOR_FROMNAME(色名)
ENDIF

PRINTFORM %ARGS%
RESETCOLOR

;上記処理を改行する
@PRINTCOLORL, ARGS, 色名
#DIMS DYNAMIC 色名

CALL PRINTCOLOR, ARGS, 色名
PRINTL
