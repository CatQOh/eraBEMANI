@LOOPRES(ARG:0 = -1, ARG:1 = -1, ARG:2 = -1, ARG:3 = -1, ARG:4 = -1, ARG:5 = -1, ARG:6 = -1, ARG:7 = -1, ARG:8 = -1, ARG:9 = -1)
#FUNCTION
;式中関数「LOOPRES(LOOP RESULT)」
;DO～LOOP構文の記述を簡略化するための関数
;引数で指定された数字とRESULTを参照し、一致していれば0を返す(つまりLOOPを抜ける)
;現在同時に指定できるのは10個まで
REPEAT 10
	SIF RESULT == ARG:COUNT
		RETURNF 0
REND

RETURNF 1

@SEX, ARG
#FUNCTION
;式中関数「SEX」
;性別を判別するための関数
;引数で指定された対象の性別が、男なら1、女なら2を返す
RETURNF TALENT:ARG:性別

@CHECK_CHILD_CARE, ARG
#FUNCTION
;式中関数「CHECK_CHILD_CARE」
;育児室に居るかどうか判別するための関数
;引数で指定されたキャラを対象に判別する
SIF (TALENT:ARG:妊娠 && PREG:ARG:10-5 <= DAY) || TALENT:ARG:育児中
	RETURNF 1

RETURNF 0

@PENIS, ARG
#FUNCTION
;式中関数「PENIS」
;対象にちんこ生えてるかどうか ぱんくしょんにもあったな
;ARGが-1だと0を返すので、対象や助手が居ないのに参照してエラーになることはない
SIF ARG == -1
	RETURNF 0
SIF SEX(ARG) == 1 || TALENT:ARG:ふたなり
	RETURNF 1

RETURNF 0

@VAGINA, ARG
#FUNCTION
;式中関数「VAGINA」
;対象にまんこあるかどうか ぱんくしょんにもあったかどうかは知らん
;ARGが-1だと0を返すので、対象や助手が居ないのに参照してエラーになることはない
SIF ARG == -1
	RETURNF 0
SIF SEX(ARG) == 2 || TALENT:ARG:ふたなり
	RETURNF 1

RETURNF 0

@OVER_GENITAL, ARG
#FUNCTIONS
;式中関数「OVER_GENITAL」
;対象の性器を覆い隠している服は何か 一番上の服が返される 下半身上着＝全身上着＞下半身下着
SIF TEQUIP:ARG:全身上着 && CFLAG:ARG:着衣併用 != 1
	RETURNF CSTR:ARG:全身上着

SIF TEQUIP:ARG:下半身上着
	RETURNF CSTR:ARG:下半身上着

SIF TEQUIP:ARG:下半身下着
	RETURNF CSTR:ARG:下半身下着

@OVER_BUST, ARG
#FUNCTIONS
;式中関数「OVER_BUST」
;対象の乳房を覆い隠している服は何か 一番上の服が返される 上半身上着＝全身上着＞上半身下着
SIF TEQUIP:ARG:全身上着 && CFLAG:ARG:着衣併用 != 1
	RETURNF CSTR:ARG:全身上着

SIF TEQUIP:ARG:上半身上着
	RETURNF CSTR:ARG:上半身上着

SIF TEQUIP:ARG:上半身下着
	RETURNF CSTR:ARG:上半身下着

@FALLTYPE, ARG
#FUNCTION
;式中関数「FALLTYPE」
;陥落素質のタイプ eraBEMANIでは恋慕系、淫乱系、服従系のどれか一つしか取得できないので、
;恋慕or親愛だと1 淫乱or娼婦だと2 服従or隷属だと3を返す 未陥落は0
IF TALENT:ARG:恋慕 || TALENT:ARG:親愛
	RETURNF 1
ELSEIF TALENT:ARG:淫乱 || TALENT:ARG:娼婦
	RETURNF 2
ELSEIF TALENT:ARG:服従 || TALENT:ARG:隷属
	RETURNF 3
ELSE
	RETURNF 0
ENDIF

@性器露出, ARG
#FUNCTION
;式中関数「性器露出」
;単に性器が露出している状態かどうかを判別 OVER_GENITALとは少し違う(スカート系が対象にならない)
SELECTCASE OVER_GENITAL(ARG)
	CASE ""
		RETURNF 1
	CASE CSTR:ARG:下半身上着, CSTR:ARG:全身上着
		IF TEQUIP:ARG:下半身下着
			RETURNF 0
		ELSEIF CFLAG:ARG:挿入可
			RETURNF 1
		ELSE
			RETURNF 0
		ENDIF
	CASE CSTR:ARG:下半身下着
		RETURNF 0
ENDSELECT

RETURNF 0

@SELECT_RACE, ARG
#FUNCTION
;式中関数「SELECT_RACE」
;対象の種族名に対応した種族番号を返す
SELECTCASE CSTR:ARG:種族
	CASE "人間"
		RETURNF 1
	CASE "宇宙人"
		RETURNF 2
	CASE "人間(？)"
		RETURNF 3
	CASE "改造人間"
		RETURNF 4
	CASE "精霊"
		RETURNF 5
	CASE "天使"
		RETURNF 6
	CASE "悪魔"
		RETURNF 7
	CASE "神"
		RETURNF 8
	CASE "鳳凰"
		RETURNF 9
	CASE "魔術師"
		RETURNF 10
	CASE "獣人"
		RETURNF 11
	CASE "機械"
		RETURNF 12
	CASE "人魚"
		RETURNF 13
	CASE "妖精"
		RETURNF 14
	CASE "ゾンビ"
		RETURNF 15
	CASE "獣"
		RETURNF 16
	CASE "ヴァンパイア"
		RETURNF 17
	CASEELSE
		RETURNF 99
ENDSELECT

@生殖機能♂, ARG = -1
#FUNCTION
SIF ARG == -1
	ARG = TARGET

SIF TALENT:ARG:無機物
	RETURNF 0

SIF CSTR:ARG:種族 == "機械"
	RETURNF 0

SIF TALENT:ARG:ゾンビ
	RETURNF 0

SELECTCASE CFLAG:ARG:精管結紮
	CASE 1
		RETURNF 0
	CASE 2
		SIF CFLAG:ARG:不妊担当魔術師 == NO:MASTER || (ASSI >= 0 && CFLAG:ARG:不妊担当魔術師 == NO:ASSI)
			RETURNF 0
ENDSELECT

RETURNF 1

@生殖機能♀, ARG = -1
#FUNCTION
SIF ARG == -1
	ARG = TARGET

SIF !VAGINA(ARG)
	RETURNF 0

SIF TALENT:ARG:無機物
	RETURNF 0

SIF CSTR:ARG:種族 == "機械"
	RETURNF 0

SELECTCASE CFLAG:ARG:卵管結紮
	CASE 1
		RETURNF 0
	CASE 2
		SIF CFLAG:ARG:不妊担当魔術師 == NO:MASTER || (ASSI >= 0 && CFLAG:ARG:不妊担当魔術師 == NO:ASSI)
			RETURNF 0
ENDSELECT

RETURNF 1

;引数で指定した素質名の番号を返す式中関数
@TALENTF, ARGS
#FUNCTION
#DIM DYNAMIC LCOUNT

FOR LCOUNT, 0, VARSIZE("TALENT")
	SIF TALENTNAME:LCOUNT == ARGS
		RETURNF LCOUNT
NEXT

;引数のキャラのNAMEを返すが、NOの範囲が1～9999じゃないと返さない プレイヤーの名前入力による予期せぬ挙動を防ぐため
@CHARANAMEF, ARG
#FUNCTIONS

SIF ARG < 0 || ARG >= CHARANUM
	RETURNF 

SELECTCASE NO:ARG
	CASE 1 TO 9999
		RETURNF NAME:ARG
	CASEELSE
		RETURNF 
ENDSELECT

;
;引数のキャラ番号のNAMEを返す。CSVが無い子供の場合はあらかじめ記録しておいたCHILDNAMEを返す
@CSVNAMEF, ARG
#FUNCTIONS

SELECTCASE ARG
	CASE 0 TO 9999
		SIF EXISTCSV(ARG)
			RETURNF CSVNAME(ARG)
	CASEELSE
		RETURNF CHILDNAME:(ARG-10000)
ENDSELECT

;引数のキャラ番号のCALLNAMEを返す。CSVが無い子供の場合はあらかじめ記録しておいたCHILDNAMEを返す
@CSVCALLNAMEF, ARG
#FUNCTIONS

SELECTCASE ARG
	CASE 0 TO 9999
		SIF EXISTCSV(ARG)
			RETURNF CSVCALLNAME(ARG)
	CASEELSE
		RETURNF CHILDNAME:(ARG-10000)
ENDSELECT

;以下パセリロゴ表示のための関数 式中関数じゃないけどほとんど式中関数みたいな使い方なので
@PASELI, ARGS
;PRINT
#DIM DYNAMIC LCOUNT

VARSET LOCALS, 

SPLIT ARGS, "＄", LOCALS

FOR LCOUNT, 0, RESULT
	IF LCOUNT >= 1
		IF FLAG:パセリ表示
			PRINT_IMG "PASELI"
		ELSEIF 通貨単位 != ""
			PRINTFORM %通貨単位%
		ELSE
			PRINT $
		ENDIF
	ENDIF
	PRINTFORM %LOCALS:LCOUNT%
NEXT

@PASELIL, ARGS
;PRINTL
#DIM DYNAMIC LCOUNT

VARSET LOCALS, 

SPLIT ARGS, "＄", LOCALS

FOR LCOUNT, 0, RESULT
	IF LCOUNT >= 1
		IF FLAG:パセリ表示
			PRINT_IMG "PASELI"
		ELSEIF 通貨単位 != ""
			PRINTFORM %通貨単位%
		ELSE
			PRINT $
		ENDIF
	ENDIF
	PRINTFORM %LOCALS:LCOUNT%
NEXT

PRINTL 

@PASELIW, ARGS
;PRINTW
#DIM DYNAMIC LCOUNT

VARSET LOCALS, 

SPLIT ARGS, "＄", LOCALS

FOR LCOUNT, 0, RESULT
	IF LCOUNT >= 1
		IF FLAG:パセリ表示
			PRINT_IMG "PASELI"
		ELSEIF 通貨単位 != ""
			PRINTFORM %通貨単位%
		ELSE
			PRINT $
		ENDIF
	ENDIF
	PRINTFORM %LOCALS:LCOUNT%
NEXT

PRINTW 

@PASELIPLAIN, ARGS
;PRINTPLAIN
#DIM DYNAMIC LCOUNT

VARSET LOCALS, 

SPLIT ARGS, "＄", LOCALS

FOR LCOUNT, 0, RESULT
	IF LCOUNT >= 1
		IF FLAG:パセリ表示
			PRINT_IMG "PASELI"
		ELSEIF 通貨単位 != ""
			PRINTFORM %通貨単位%
		ELSE
			PRINT $
		ENDIF
	ENDIF
	PRINTPLAINFORM %LOCALS:LCOUNT%
NEXT


;2桁の数値を直接入力するための関数
;ARGは最大値
;ARGSは単位
@TWO_DIGIT, ARG, ARGS

LOCAL = 0

PRINTL キーボードによる直接入力もできます

DO
	PRINTL
	IF LOCAL >= 10
		PRINTFORM 【 %TOFULL(TOSTR(LOCAL/10))%
	ELSE
		PRINT 【 　
	ENDIF
	PRINTFORML %TOFULL(TOSTR(LOCAL%10))% 】%ARGS%

	IF ARG >= 10
		PRINTBUTTON  "[ 0 ]", 200
	ELSE
		PRINTPLAIN      
	ENDIF
	IF ARG >= 0
		PRINTBUTTON "[ 0 ]", 100
		PRINTL
	ENDIF
	IF ARG >= 10
		PRINTBUTTON  "[ 1 ]", 110
	ELSE
		PRINTPLAIN      
	ENDIF
	IF ARG >= 1
		PRINTBUTTON "[ 1 ]", 101
		PRINTL
	ENDIF
	IF ARG >= 20
		PRINTBUTTON  "[ 2 ]", 120
	ELSE
		PRINTPLAIN      
	ENDIF
	IF ARG >= 2
		PRINTBUTTON "[ 2 ]", 102
		PRINTL
	ENDIF
	IF ARG >= 30
		PRINTBUTTON  "[ 3 ]", 130
	ELSE
		PRINTPLAIN      
	ENDIF
	IF ARG >= 3
		PRINTBUTTON "[ 3 ]", 103
		PRINTL
	ENDIF
	IF ARG >= 40
		PRINTBUTTON  "[ 4 ]", 140
	ELSE
		PRINTPLAIN      
	ENDIF
	IF ARG >= 4
		PRINTBUTTON "[ 4 ]", 104
		PRINTL
	ENDIF
	IF ARG >= 50
		PRINTBUTTON  "[ 5 ]", 150
	ELSE
		PRINTPLAIN      
	ENDIF
	IF ARG >= 5
		PRINTBUTTON "[ 5 ]", 105
		PRINTL
	ENDIF
	IF ARG >= 60
		PRINTBUTTON  "[ 6 ]", 160
	ELSE
		PRINTPLAIN      
	ENDIF
	IF ARG >= 6
		PRINTBUTTON "[ 6 ]", 106
		PRINTL
	ENDIF
	IF ARG >= 70
		PRINTBUTTON  "[ 7 ]", 170
	ELSE
		PRINTPLAIN      
	ENDIF
	IF ARG >= 7
		PRINTBUTTON "[ 7 ]", 107
		PRINTL
	ENDIF
	IF ARG >= 80
		PRINTBUTTON  "[ 8 ]", 180
	ELSE
		PRINTPLAIN      
	ENDIF
	IF ARG >= 8
		PRINTBUTTON "[ 8 ]", 108
		PRINTL
	ENDIF
	IF ARG >= 90
		PRINTBUTTON  "[ 9 ]", 190
	ELSE
		PRINTPLAIN      
	ENDIF
	IF ARG >= 9
		PRINTBUTTON  "[ 9 ]", 109
		PRINTL
	ENDIF
	PRINTBUTTON "[  決定  ]", 999
	PRINTL
	INPUTS
	
	SIF RESULTS == ""
		RETURN LOCAL
	SIF RESULTS != "0" && TOINT(RESULTS) == 0
		CONTINUE
	;見やすさから変数RESULTを使用
	RESULT = TOINT(RESULTS)

	IF RESULT == 999
		CLEARLINE 1
		RETURN LOCAL
	ENDIF

	IF RESULT >= 110
		LOCAL %= 10
		LOCAL += 10 * ((RESULT/10)%10)
	ELSEIF RESULT >= 100
		LOCAL = LOCAL /10 *10
		LOCAL += RESULT%10
	ELSEIF RESULT > ARG
		LOCAL = ARG
	ELSEIF RESULT >= 0
		RETURN RESULT
	ENDIF
	SIF LOCAL > ARG
		LOCAL = ARG
	SIF LOCAL < 0
		LOCAL = 0
	CLEARLINE 14
LOOP 1


;素数かどうかを判定する
;素数なら1,それ以外(合成数・1以下の整数)なら0
@ISPRIME(ARG)
#FUNCTION
SIF ARG < 2
	RETURNF 0
SIF ARG == 2
	RETURNF 1
SIF ARG % 2 == 0
	RETURNF 0
FOR ARG:1, 3, SQRT(ARG)+1, 2
	SIF ARG % ARG:1 == 0
		RETURNF 0
NEXT
RETURNF 1


;平方数(整数を2乗してできる数)なら1を返す式中関数
@ISSQUARE(ARG)
#FUNCTION
SIF ARG < 0
	RETURNF 0
IF ARG == SQRT(ARG)*SQRT(ARG)
	RETURNF 1
ELSE
	RETURNF 0
ENDIF


;約数関数
;ARGの正の約数全てをARG:1乗した総和を表す
;ARG:1が0で約数の個数、ARG:1が1で約数の総和を求める
;ARGが0のとき特例で0、ARGが負でABS(ARG)での値にマイナスをつける
@SIGMA(ARG, ARG:1=1)
#FUNCTION
#DIM DYNAMIC LCOUNT
#DIM DYNAMIC LSUM

SIF ARG == 0
	RETURNF 0

FOR LCOUNT, 1, ABS(ARG)+1
	SIF ABS(ARG)%LCOUNT == 0
		LSUM += POWER(LCOUNT, ARG:1)
NEXT
LSUM *= SIGN(ARG)

RETURNF LSUM
