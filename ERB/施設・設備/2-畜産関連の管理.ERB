@畜産
#DIM DYNAMIC 飼育レベル計算用
#DIM DYNAMIC 養殖レベル計算用
#DIM DYNAMIC 減額率
#DIM DYNAMIC 減額率計算用
#DIM DYNAMIC LCOUNT

;新婚モード
IF ゲームモード() == "新婚モード" && FINDCHARA(CFLAG:嫁, 1) >= 0
	CSTR:MASTER:配属 = 畜産業
	CSTR:FINDCHARA(CFLAG:嫁, 1):配属 = 畜産業
ENDIF

飼育レベル計算用 = 0
養殖レベル計算用 = 0
減額率 = 0

FOR LCOUNT, 0, CHARANUM
	IF CSTR:LCOUNT:配属 == "畜産業"
		CFLAG:LCOUNT:配属完了 = 1
		飼育レベル計算用 += 飼育レベル(LCOUNT)
		養殖レベル計算用 += 養殖レベル(LCOUNT)
		;出費減額率の計算 実務経験、飼育技能、その他素質で一人につき最大9%減
		減額率計算用 = 0
		;実務経験/200 最大5%
		減額率計算用 += MIN(EXP:LCOUNT:実務経験, 1000)/200
		;飼育レベル
		減額率計算用 += ABL:LCOUNT:飼育技能+特質("ワーカホリック", LCOUNT)/10
		;買い物上手 2%
		SIF TALENT:LCOUNT:買い物上手
			減額率計算用 += 2
		;専業主婦 2%
		SIF TALENT:LCOUNT:専業主婦
			減額率計算用 += 2
		減額率 += MIN(減額率計算用, 9)
	ENDIF
NEXT

;新婚モードなら飼育レベルと養殖レベルは50にする
IF ゲームモード() == "新婚モード"
	飼育レベル計算用 = 50
	養殖レベル計算用 = 50
ENDIF

;ORIGINモードなら最初から所持
IF ORIGIN
	ITEM:牧場 = 1
	ITEM:畜舎 = 1
	ITEM:養蜂場 = 1
	ITEM:生け簀 = 1
	牛の状態 = 50
	馬の状態 = 50
	羊の状態 = 50
	豚の状態 = 50
	鶏の状態 = 50
	蜂の状態 = 50
ENDIF

DRAWLINE
PRINTL □畜産関連の管理
IF !ORIGIN
	IF ITEM:牧場 || ITEM:畜舎 || ITEM:養蜂場 || ITEM:生け簀
		PRINT 　現在の予算 
		SIF ITEM:牧場
			CALL PASELI, @"牧場の予算:{牧場の予算}＄/1000000＄ "
		SIF ITEM:畜舎
			CALL PASELI, @"畜舎の予算:{畜舎の予算}＄/1000000＄ "
		PRINTL 
		PRINT 　　　　　　 
		SIF ITEM:養蜂場
			CALL PASELI, @"養蜂場の予算:{養蜂場の予算}＄/100000＄ "
		SIF ITEM:生け簀
			CALL PASELI, @"生け簀の予算:{生け簀の予算}＄/1000000＄"
		PRINTL 
	ENDIF
ENDIF
SIF ゲームモード() != "新婚モード"
	PRINTFORML 　現在の人員 配属人数:{CMATCH(CSTR:配属, "畜産業")}/10 飼育レベル:{飼育レベル計算用} 養殖レベル:{養殖レベル計算用} 出費の減額率:{減額率}\%/90\%
PRINTL 

IF (ITEM:牧場 || ITEM:畜舎 || ITEM:生け簀 || ITEM:養蜂場) && ゲームモード() != "新婚モード"
	SIF !ORIGIN
		PRINTL 　[1] - 畜産業に投資する
	PRINTL 　[2] - 人員を配置する
ELSEIF ゲームモード() != "新婚モード"
	SETCOLORBYNAME gray
	HTML_PRINT SET_TOOLTIP("　[-] - 畜産業に投資する", "畜産用の設備を導入する必要があります")
	HTML_PRINT SET_TOOLTIP("　[-] - 人員を配置する", "畜産用の設備を導入する必要があります")
	RESETCOLOR
ENDIF
IF ITEM:生け簀
	PRINTL 　[3] - 魚の養殖を始める
ELSE
	SETCOLORBYNAME gray
	HTML_PRINT SET_TOOLTIP("　[-] - 魚の養殖を始める", "生け簀を導入する必要があります")
	RESETCOLOR
ENDIF

PRINTL 　[4] - 生産状況を確認する
SIF !ORIGIN
	PRINTL 　[5] - 設備を導入する
;PRINTL 　[6] - 畜産業の説明
DRAWLINE
PRINTPLAIN 　畜産　
PRINTL [0] - 戻る

DO
	INPUT
	SELECTCASE RESULT
		CASE 1
			SIF (ITEM:牧場 || ITEM:畜舎 || ITEM:生け簀 || ITEM:養蜂場) && ゲームモード() != "新婚モード" && !ORIGIN
				CALL 畜産業に投資する
			RESTART
		CASE 2
			SIF (ITEM:牧場 || ITEM:畜舎 || ITEM:生け簀 || ITEM:養蜂場) && ゲームモード() != "新婚モード"
				CALL STRATEGY_PERSONAL, "畜産業"
			RESTART
		CASE 3
			SIF ITEM:生け簀
				CALL 魚の養殖, 減額率, 養殖レベル計算用
			RESTART
		CASE 4
			CALL 生産状況_畜産, 減額率
			RESTART
		CASE 5
			SIF !ORIGIN
				CALL 畜産設備導入
			RESTART
		CASE 6
			CALL MANUAL_畜産業
			RESTART
		CASE 0
			;新婚モード
			IF ゲームモード() == "新婚モード" && FINDCHARA(CFLAG:嫁, 1) >= 0
				CSTR:MASTER:配属 = 
				CSTR:FINDCHARA(CFLAG:嫁, 1):配属 = 
			ENDIF
			RETURN
	ENDSELECT
LOOP 1

@畜産業に投資する
#DIM DYNAMIC 自動投資可能
#DIM DYNAMIC LRESULT
DRAWLINE
PRINTL □畜産業の各施設に投資できます
PRINTL 　予算が増えることで動物たちの環境が改善され、健康管理に良い影響を及ぼします
CALL PASELIL, @"　現在の予算:{MONEY}＄"
PRINTL 
自動投資可能 = 0
IF ITEM:牧場
	CALL PASELIL, @"　[0] - 牧場に投資する(現在の予算:{牧場の予算}＄/1000000＄)"
	自動投資可能 = 1
ELSE
	SETCOLORBYNAME gray
	PRINTL 　[-] - 牧場未所持
	RESETCOLOR
ENDIF

IF ITEM:畜舎
	CALL PASELIL, @"　[1] - 畜舎に投資する(現在の予算:{畜舎の予算}＄/1000000＄)"
	自動投資可能 = 1
ELSE
	SETCOLORBYNAME gray
	PRINTL 　[-] - 畜舎未所持
	RESETCOLOR
ENDIF

IF ITEM:養蜂場
	CALL PASELIL, @"　[2] - 養蜂場に投資する(現在の予算:{養蜂場の予算}＄/100000＄)"
	自動投資可能 = 1
ELSE
	SETCOLORBYNAME gray
	PRINTL 　[-] - 養蜂場未所持
	RESETCOLOR
ENDIF

IF ITEM:生け簀
	CALL PASELIL, @"　[3] - 養殖に投資する(現在の予算:{生け簀の予算}＄/1000000＄)"
	自動投資可能 = 1
ELSE
	SETCOLORBYNAME gray
	PRINTL 　[-] - 生け簀未所持
	RESETCOLOR
ENDIF
SIF 自動投資可能
	PRINTFORML 　[4] - 自動投資を\@ 自動投資 ? オフ # オン \@にする

PRINTL 　[9] - 戻る

DO
	INPUT
	SELECTCASE RESULT
		CASE 0
			IF ITEM:牧場
				PRINTL □牧場への投資
				CALL PASELIL, @"　投資する金額を入力してください 現在の所持金:{MONEY}＄"
				PRINTBUTTON "　[MAX]", MONEY > 1000000-牧場の予算 ? 1000000-牧場の予算 # MONEY
				PRINTL [500000][100000][50000][10000][5000]
				IF 牛の状態 == 0 || 馬の状態 == 0 || 羊の状態 == 0
					PRINTL 
					PRINTL □動物を購入
					SIF 牛の状態 == 0
						CALL PASELIL, @"　[-1] - 牛を買う(100000＄)"
					SIF 馬の状態 == 0
						CALL PASELIL, @"　[-2] - 馬を買う(100000＄)"
					SIF 羊の状態 == 0
						CALL PASELIL, @"　[-3] - 羊を買う(50000＄)"
				ENDIF
				PRINTL 　[0] - 戻る
				DO
					INPUT
					LRESULT = RESULT
					SELECTCASE LRESULT
						CASE -1
							SIF 牛の状態
								CONTINUE
							IF 100000 > MONEY
								PRINTW 所持金が足りません
								BREAK
							ENDIF
							PRINTW 牛を購入しました
							MONEY -= 100000
							牛の状態 = 50
							ITEM:牛肉 = 1
							BREAK
						CASE -2
							SIF 馬の状態
								CONTINUE
							IF 100000 > MONEY
								PRINTW 所持金が足りません
								BREAK
							ENDIF
							PRINTW 馬を購入しました
							MONEY -= 100000
							馬の状態 = 50
							ITEM:馬肉 = 1
							BREAK
						CASE -3
							SIF 羊の状態
								CONTINUE
							IF 50000 > MONEY
								PRINTW 所持金が足りません
								BREAK
							ENDIF
							PRINTW 羊を購入しました
							MONEY -= 50000
							羊の状態 = 50
							ITEM:羊肉 = 1
							BREAK
						CASE 0
							RESTART
					ENDSELECT
					IF LRESULT > MONEY
						PRINTW 所持金が足りません
						CONTINUE
					ENDIF
					CALL SETMIN, LRESULT, 1000000-牧場の予算
					SIF LRESULT == 0
						RESTART
					CALL PASELIW, @"牧場に{LRESULT}＄投資しました"
					牧場の予算 += LRESULT
					RESTART
				LOOP 1
				RESTART
			ENDIF
		CASE 1
			IF ITEM:畜舎
				PRINTL □畜舎に投資する
				CALL PASELIL, @"　投資する金額を入力してください 現在の所持金:{MONEY}＄"
				PRINTBUTTON "　[MAX]", MONEY > 1000000-畜舎の予算 ? 1000000-畜舎の予算 # MONEY
				PRINTL [500000][100000][50000][10000][5000][0]
				IF 豚の状態 == 0 || 鶏の状態 == 0
					PRINTL 
					PRINTL □動物を購入する
					SIF 豚の状態 == 0
						CALL PASELIL, @"　[-1] - 豚を買う(50000＄)"
					SIF 鶏の状態 == 0
						CALL PASELIL, @"　[-2] - 鶏を買う(30000＄)"
				ENDIF
				PRINTL 　[0] - 戻る
				DO
					INPUT
					LRESULT = RESULT
					SELECTCASE LRESULT
						CASE -1
							SIF 豚の状態
								CONTINUE
							IF 50000 > MONEY
								PRINTW 所持金が足りません
								BREAK
							ENDIF
							PRINTW 豚を購入しました
							MONEY -= 50000
							豚の状態 = 50
							ITEM:豚肉 = 1
							BREAK
						CASE -2
							SIF 鶏の状態
								CONTINUE
							IF 30000 > MONEY
								PRINTW 所持金が足りません
								BREAK
							ENDIF
							PRINTW 鶏を購入しました
							MONEY -= 30000
							鶏の状態 = 50
							ITEM:鶏肉 = 1
							BREAK
						CASE 0
							RESTART
					ENDSELECT
					IF LRESULT > MONEY
						PRINTW 所持金が足りません
						CONTINUE
					ENDIF
					CALL SETMIN, LRESULT, 1000000-畜舎の予算
					SIF LRESULT == 0
						RESTART
					CALL PASELIW, @"畜舎に{LRESULT}＄投資しました"
					畜舎の予算 += LRESULT
					RESTART
				LOOP 1
				RESTART
			ENDIF
		CASE 2
			IF ITEM:養蜂場
				PRINTL □養蜂場に投資する
				CALL PASELIL, @"　投資する金額を入力してください 現在の所持金:{MONEY}＄"
				PRINTBUTTON "　[MAX]", MONEY > 100000-養蜂場の予算 ? 100000-養蜂場の予算 # MONEY
				PRINTL [50000][10000][5000][0]
				IF 蜂の状態 == 0
					PRINTL 
					PRINTL □動物を購入する
					CALL PASELIL, @"　[-1] - ミツバチを購入する(10000＄)"
				ENDIF
				PRINTL 　[0] - 戻る
				DO
					INPUT
					LRESULT = RESULT
					SELECTCASE LRESULT
						CASE -1
							SIF 蜂の状態
								CONTINUE
							IF 10000 > MONEY
								PRINTW 所持金が足りません
								BREAK
							ENDIF
							PRINTW ミツバチを購入しました
							MONEY -= 10000
							蜂の状態 = 50
							ITEM:蜂蜜 = 1
							BREAK
						CASE 0
							RESTART
					ENDSELECT
					IF LRESULT > MONEY
						PRINTW 所持金が足りません
						CONTINUE
					ENDIF
					CALL SETMIN, LRESULT, 100000-養蜂場の予算
					SIF LRESULT == 0
						RESTART
					CALL PASELIW, @"養蜂場に{LRESULT}＄投資しました"
					養蜂場の予算 += LRESULT
					RESTART
				LOOP 1
				RESTART
			ENDIF
		CASE 3
			IF ITEM:生け簀
				CALL PASELIL, @"投資する金額を入力してください 現在の所持金:{MONEY}＄"
				PRINTBUTTON "[MAX]", MONEY > 1000000-生け簀の予算 ? 1000000-生け簀の予算 # MONEY
				PRINTL [500000][100000][50000][10000][5000][0]
				DO
					INPUT
					LRESULT = RESULT
					IF LRESULT > MONEY
						PRINTW 所持金が足りません
						CONTINUE
					ENDIF
					CALL SETMIN, LRESULT, 1000000-生け簀の予算
					SIF LRESULT == 0
						RESTART
					CALL PASELIW, @"生け簀に{LRESULT}＄投資しました"
					生け簀の予算 += LRESULT
					RESTART
				LOOP 1
			ENDIF
		CASE 4
			INVERTBIT 自動投資, 0
			RESTART
		CASE 9
			RETURN
	ENDSELECT
LOOP 1

@魚の養殖, 減額率, 養殖レベル計算用
#DIM DYNAMIC LCOUNT
#DIM DYNAMIC 減額率
#DIM DYNAMIC 養殖レベル計算用
#DIM DYNAMIC 海産物
#DIM DYNAMIC LRESULT

DRAWLINE
PRINTL □魚を養殖します
PRINTFORML 　現在の人員での養殖成功までの日数 {50-養殖レベル計算用/2}日
FOR LCOUNT, 1, 5
	PRINTFORM 　[{LCOUNT}] - 
	IF 生け簀の養殖:LCOUNT == ""
		PRINTL 未使用の生け簀
	ELSE
		PRINTFORML %生け簀の養殖:LCOUNT%の生け簀\@ 生け簀の状態:LCOUNT == 0 ? (養殖成功) # (養殖中 残り{生け簀の状態:LCOUNT}日) \@
	ENDIF
NEXT
DRAWLINE
PRINTPLAIN 　魚の養殖　
PRINTL [0] - 戻る

DO
	INPUT
	SELECTCASE RESULT
		CASE 0
			RETURN
		CASE 1 TO 4
			LRESULT = RESULT
			IF 生け簀の養殖:LRESULT != ""
				PRINTFORML {LRESULT}番の生け簀では%生け簀の養殖:LRESULT%を養殖中です。新しく別の魚を養殖しますか？
				PRINTL [0] - 新しいものに挑戦したい
				PRINTL [1] - もったいないからやめる
				DO 
					INPUT
					SIF RESULT == 1
						RESTART
				LOOP LOOPRES(0)
			ENDIF
			DRAWLINE
			PRINTFORML □{LRESULT}番の生け簀で何を養殖しますか？
			FOR LCOUNT, 800, 850
				SIF ITEMNAME:LCOUNT != ""
					CALL PASELIL, @"　[{LCOUNT-800, 2}] - %ITEMNAME:LCOUNT%\@ !ORIGIN ? (養殖費用 およそ{ITEMPRICE:LCOUNT*(100-減額率)/100}＄/日)#\@"
			NEXT
			DRAWLINE
			PRINTPLAIN 　生け簀　
			PRINTL [100] - 戻る
			DO
				INPUT
				SELECTCASE RESULT
					CASE 100
						RESTART
					CASEELSE
						海産物 = RESULT+800
						PRINTFORML {LRESULT}番の生け簀で%ITEMNAME:海産物%の養殖を始めました
						生け簀の状態:LRESULT = 50-養殖レベル計算用/2
						生け簀の養殖:LRESULT = %ITEMNAME:海産物%
						ITEM:海産物 = 1
						RESTART
				ENDSELECT
			LOOP 1
	ENDSELECT
LOOP 1

@生産状況_畜産, 減額率
#DIM DYNAMIC LCOUNT
#DIM DYNAMIC 名前文字数
#DIM DYNAMIC 減額率
#DIM DYNAMIC LTARGET
#DIMS DYNAMIC 表示用
DRAWLINE

PRINTFORML □畜産業の人員:{CMATCH(CSTR:配属, "畜産業")}/10
IF CMATCH(CSTR:配属, "畜産業")
	FOR LCOUNT, 0, CHARANUM
		SIF CSTR:LCOUNT:配属 == "畜産業"
			CALL SETMAX(名前文字数, STRLENS(NAME:LCOUNT))
	NEXT
	LTARGET = TARGET
	FOR LCOUNT, 0, CHARANUM
		IF CSTR:LCOUNT:配属 == "畜産業"
			TARGET = LCOUNT
			PRINTFORM 　%NAME:LCOUNT, 名前文字数, LEFT% 飼育技能:{ABL:LCOUNT:飼育技能, 2, LEFT} 飼育適性:{飼育レベル(LCOUNT), 2, LEFT} 
			SIF 統率者("畜産業") && !TALENT:LCOUNT:統率
				PRINT 統率者ボーナス+1 
			CALL ISTALENT, LCOUNT, "世話好き"
			SELECTCASE CSTR:LCOUNT:種族
				CASE "獣人"
					PRINT [獣人]
				CASE "獣"
					PRINT [獣]
				CASE "人魚"
					PRINT [人魚]
				CASE "精霊"
					PRINT [精霊]
				CASE "妖精"
					PRINT [妖精]
			ENDSELECT
			CALL ISTALENT, LCOUNT, "統率"
			CALL NEED_JUEL_飼育技能
			CALL CHECK_JUEL_飼育技能
			SIF 特質("ワーカホリック", LCOUNT)
				PRINTFORM [ワーカホリック+{特質("ワーカホリック", LCOUNT)/10}]
			SIF RESULT && ABL:LCOUNT:飼育技能 < 10
				PRINTBUTTON "[飼育技能上昇可能]", LCOUNT+1
			PRINTL 
		ENDIF
	NEXT
	TARGET = LTARGET
ELSE
	PRINTL 　[無し]
ENDIF
	PRINTL 

PRINTL 　[-1] 動物図鑑を見る
PRINTL 

PRINTL □自動投資
PRINTFORML 　現在:\@ 自動投資 ? オン # オフ \@
PRINTL 

CALL PASELIL, @"□現在の牧場 (牧場の予算:{牧場の予算}＄/1000000＄)"
IF !ITEM:牧場
	SETCOLORBYNAME gray
	PRINTL 　[牧場未所持]
	RESETCOLOR
ELSE
	PRINT 　牛の状態:
	CALL 動物の具合, 牛の状態
	PRINT 馬の状態:
	CALL 動物の具合, 馬の状態
	PRINT 羊の状態:
	CALL 動物の具合, 羊の状態
	IF ユニコーンの状態 > 0
		PRINT ユニコーンの状態:
		CALL 動物の具合, ユニコーンの状態
	ENDIF
	IF バイコーンの状態 > 0
		PRINT バイコーンの状態:
		CALL 動物の具合, バイコーンの状態
	ENDIF
	PRINTL 
ENDIF
PRINTL 

CALL PASELIL, @"□現在の畜舎 (畜舎の予算:{畜舎の予算}＄/1000000＄)"
IF !ITEM:畜舎
	SETCOLORBYNAME gray
	PRINTL 　[畜舎未所持]
	RESETCOLOR
ELSE
	PRINT 　豚の状態:
	CALL 動物の具合, 豚の状態
	PRINT 　鶏の状態:
	CALL 動物の具合, 鶏の状態
	PRINTL 
ENDIF
PRINTL 

CALL PASELIL, @"□現在の養蜂場 (養蜂場の予算:{養蜂場の予算}＄/100000＄)"
IF !ITEM:養蜂場
	SETCOLORBYNAME gray
	PRINTL 　[養蜂場未所持]
	RESETCOLOR
ELSE
	PRINT 　蜂の状態:
	CALL 動物の具合, 蜂の状態
	PRINTL 
ENDIF
PRINTL 

CALL PASELIL, @"□現在の生け簀 (生け簀の予算:{生け簀の予算}＄/1000000＄)"
IF !ITEM:生け簀
	SETCOLORBYNAME gray
	PRINTL 　[生け簀未所持]
	RESETCOLOR
ELSE
	FOR LCOUNT, 1, 5
		IF 生け簀の養殖:LCOUNT != ""
			PRINTFORM 　{LCOUNT}番の生け簀:%生け簀の養殖:LCOUNT%
			IF 生け簀の状態:LCOUNT != 0
				PRINTFORM 養殖中(残り{生け簀の状態:LCOUNT}日) 
			ELSE
				PRINT 養殖成功 
			ENDIF
			CALL PASELI, @"費用:{ITEMPRICE:(生け簀の養殖:LCOUNT)*(100-減額率)/100}＄/日"
			SIF LCOUNT == 2
				PRINTL 
		ELSE
			PRINTFORM 　{LCOUNT}番の生け簀:無し
			SIF LCOUNT == 2
				PRINTL 
		ENDIF
	NEXT
ENDIF
PRINTL 
PRINTL 

PRINTL □現在生産できるアイテム
PRINT 　
SIF 牛の状態 >= 30
	PRINT [牛肉]
SIF 牛の状態 >= 80
	PRINT [牛乳]
SIF 馬の状態 >= 30 || ユニコーンの状態 >= 30 || バイコーンの状態 >= 30
	PRINT [馬肉]
SIF 羊の状態 >= 30
	PRINT [羊肉]
SIF 羊の状態 >= 80
	PRINT [チーズ]

SIF 豚の状態 >= 30
	PRINT [豚肉]
SIF 鶏の状態 >= 30
	PRINT [鶏肉]
SIF 鶏の状態 >= 80
	PRINT [卵]

SIF ITEM:触手使役術
	PRINT [触手肉]

SIF 蜂の状態 >= 30
	PRINT [蜂蜜]

FOR LCOUNT, 1, 5
	SIF 生け簀の養殖:LCOUNT != "" && 生け簀の状態:LCOUNT == 0
		PRINTFORM [%生け簀の養殖:LCOUNT%]
NEXT

表示用 = %HTML_POPPRINTINGSTR()%
IF 表示用 == "　"
	PRINT [無し]
ELSE
	PRINTFORM %表示用%
ENDIF
PRINTL 

DRAWLINE
PRINTPLAIN 　生産状況　
PRINTL [0] - 戻る

DO
	INPUT
	SELECTCASE RESULT
		CASE 0
			RETURN
		CASE -1
			CALL 動物図鑑
			RESTART
		CASEELSE
			LTARGET = TARGET
			TARGET = RESULT-1
			IF CSTR:配属 == "畜産業"
				CALL NEED_JUEL_飼育技能
				CALL CHECK_JUEL_飼育技能
				IF RESULT
					CALLFORM ABLUP{GETNUM(ABL, "飼育技能")}
					TARGET = LTARGET
					RESTART
				ENDIF
			ENDIF
			TARGET = LTARGET
	ENDSELECT
LOOP 1


@動物の具合, ARG
SELECTCASE ARG
	CASE 80 TO 100
		SETCOLORBYNAME lime
		PRINT 元気 
	CASE 50 TO 79
		PRINT 普通 
	CASE 30 TO 49
		SETCOLORBYNAME yellow
		PRINT 微妙 
	CASE 10 TO 29
		SETCOLORBYNAME red
		PRINT 悪い 
	CASE 1 TO 9
		SETCOLORBYNAME darkred
		PRINT 病気 
	CASE 0
		SETCOLORBYNAME gray
		PRINT 無し 
ENDSELECT

RESETCOLOR

@畜産設備導入
#DIMS DYNAMIC 購入設備
DRAWLINE
PRINTL □畜産用設備の導入
PRINT 現在の設備 
SETCOLORBYNAME gray
IF ITEM:牧場
	PRINTD [牧場]
ELSE
	PRINT [牧場]
ENDIF
IF ITEM:畜舎
	PRINTD [畜舎]
ELSE
	PRINT [畜舎]
ENDIF
IF ITEM:養蜂場
	PRINTD [養蜂場]
ELSE
	PRINT [養蜂場]
ENDIF
IF ITEM:生け簀
	PRINTD [生け簀]
ELSE
	PRINT [生け簀]
ENDIF
RESETCOLOR
PRINTL 
PRINTL 
IF ITEM:牧場
	PRINTL 　[-] - 牧場(購入済み)
ELSE
	CALL PASELIL, @"　[0] - 牧場を購入する({ITEMPRICE:牧場}＄)"
ENDIF
IF ITEM:畜舎
	PRINTL 　[-] - 畜舎(購入済み)
ELSE
	CALL PASELIL, @"　[1] - 畜舎を購入する({ITEMPRICE:畜舎}＄)"
ENDIF
IF ITEM:養蜂場
	PRINTL 　[-] - 養蜂場(導入済み)
ELSE
	CALL PASELIL, @"　[2] - 養蜂場を設置する({ITEMPRICE:養蜂場}＄)"
ENDIF
IF ITEM:生け簀
	PRINTL 　[-] - 生け簀(購入済み)
ELSE
	CALL PASELIL, @"　[3] - 生け簀を購入する({ITEMPRICE:生け簀}＄)"
ENDIF
PRINTL 　[9] - 戻る

DO
	INPUT
	SELECTCASE RESULT
		CASE 0
			IF !ITEM:牧場
				購入設備 = 牧場
				BREAK
			ENDIF
		CASE 1
			IF !ITEM:畜舎
				購入設備 = 畜舎
				BREAK
			ENDIF
		CASE 2
			IF !ITEM:養蜂場
				購入設備 = 養蜂場
				BREAK
			ENDIF
		CASE 3
			IF !ITEM:生け簀
				購入設備 = 生け簀
				BREAK
			ENDIF
		CASE 9
			RETURN
	ENDSELECT
LOOP 1


SELECTCASE 購入設備
	CASE "牧場"
		PRINTL 牧場:牛、馬、羊の飼育が可能になる
	CASE "畜舎"
		PRINTL 畜舎:豚、鶏の飼育が可能になる
	CASE "養蜂場"
		PRINTL 養蜂場:蜂蜜の採取が可能になる
	CASE "生け簀"
		PRINTL 生け簀:魚の養殖が可能になる
ENDSELECT

IF MONEY < ITEMPRICE:購入設備
	PRINTW 所持金が足りません
ELSE
	CALL PASELIL, @"%購入設備%を購入します。よろしいですか？(所持金:{MONEY}＄→{MONEY-ITEMPRICE:購入設備}＄)"
	PRINTL [0] - はい
	PRINTL [1] - いいえ
	DO
		INPUT
		SELECTCASE RESULT
			CASE 0
				PRINTFORMW %購入設備%を購入しました
				ITEM:購入設備 = 1
				MONEY -= ITEMPRICE:購入設備
				RESTART
			CASE 1
				RESTART
		ENDSELECT
	LOOP 1
ENDIF

@動物図鑑

DRAWLINE
PRINTL 　1,牛　 牛肉と牛乳を採取可能。乳牛だったり肉牛だったりする
PRINTL 　2,馬　 馬肉を採取可能。乗馬にも使える
PRINTL 　3,羊　 羊肉とチーズを採取可能。そのモフ度はアルパカに負けずとも劣らない
PRINTL 　4,豚　 豚肉を採取可能。たびたび罵倒の言葉に用いられるが実物は割と可愛い
PRINTL 　5,鶏　 鶏肉と鶏卵を採取可能。小さな体には世界中の食文化を担う無限の可能性が秘められている
PRINTL 　6,蜂　 蜂蜜を採取可能。刺されないように気をつけて！
PRINTL 　7,触手 触手肉を採取可能。料理システムを実装する当バリアントに登場したのが運の尽き
DRAWLINE
PRINTPLAIN 　動物図鑑　クリック・Enterで戻る
WAIT

@TURNEND_畜産
#DIM DYNAMIC LCOUNT
#DIM DYNAMIC LCOUNT2
#DIM DYNAMIC 飼育レベル計算用
#DIM DYNAMIC 養殖レベル計算用
#DIM DYNAMIC 世話好き人数
#DIM DYNAMIC モチベ計算用
#DIM DYNAMIC モチベ合計値
#DIM DYNAMIC 出費
#DIM DYNAMIC 減額率
#DIM DYNAMIC 減額率計算用
#DIM DYNAMIC 動物の死亡
#DIM DYNAMIC 養殖中
#DIM DYNAMIC ユニコーン飼育レベル
#DIM DYNAMIC バイコーン飼育レベル
#DIM DYNAMIC 特殊馬アライメント合計
#DIM DYNAMIC 状態計算用

SIF !ITEM:牧場 && !ITEM:畜舎 && !ITEM:養蜂場 && !ITEM:生け簀
	RETURN 0

CALL CHECKDRAWLINE

;ターン終了時の口上呼び出し
FOR LCOUNT, 0, CHARANUM
	SIF CSTR:LCOUNT:配属 == "畜産業" && !CFLAG:LCOUNT:口上非表示
		TRYCALLFORM TURNEND_畜産業_%CSVNAMERPS(NO:LCOUNT)%
NEXT

;以下の処理は日付変更時のみ
SIF TIME == 0
	RETURN 0

;新婚モード
IF ゲームモード() == "新婚モード" && FINDCHARA(CFLAG:嫁, 1) >= 0
	CSTR:MASTER:配属 = 畜産業
	CSTR:FINDCHARA(CFLAG:嫁, 1):配属 = 畜産業
ENDIF

FOR LCOUNT, 0, CHARANUM
	;10人配属できるので飼育レベル最大はだいたい200とする
	;養殖レベルはせいぜい70とかそこらへん
	IF CSTR:LCOUNT:配属 == "畜産業"
		飼育レベル計算用 += 飼育レベル(LCOUNT)
		養殖レベル計算用 += 養殖レベル(LCOUNT)
		SIF TALENT:LCOUNT:世話好き
			世話好き人数++
		;出費減額率の計算 実務経験、飼育技能、その他素質で一人につき最大9%減
		減額率計算用 = 0
		;実務経験/200 最大5%
		減額率計算用 += MIN(EXP:LCOUNT:実務経験, 1000)/200
		;飼育レベル
		減額率計算用 += ABL:LCOUNT:飼育技能
		SIF 統率者("畜産業") && !TALENT:LCOUNT:統率
			減額率計算用++
		;買い物上手 2%
		SIF TALENT:LCOUNT:買い物上手
			減額率計算用 += 2
		;専業主婦 2%
		SIF TALENT:LCOUNT:専業主婦
			減額率計算用 += 2
		;浪費癖 -3%
		SIF TALENT:LCOUNT:浪費癖
			減額率計算用 -= 3
		減額率 += LIMIT(減額率計算用, 0, 9)
		;ユニコーンポイントとバイコーンポイントの計算
		;下記計算式だと1キャラ-50～20の範囲くらい
		特殊馬アライメント合計 += 特殊馬アライメント(LCOUNT)
		SELECTCASE SIGN(特殊馬アライメント(LCOUNT))
			CASE 1
				ユニコーン飼育レベル += 飼育レベル(LCOUNT)
			CASE -1
				バイコーン飼育レベル += 飼育レベル(LCOUNT)
		ENDSELECT
	ENDIF
NEXT

;新婚モードなら飼育レベルと養殖レベルは50にする
IF ゲームモード() == "新婚モード"
	飼育レベル計算用 = 50
	養殖レベル計算用 = 50
ENDIF

;ORIGINなら予算は常にMAX
IF ORIGIN
	牧場の予算 = 1000000
	畜舎の予算 = 1000000
	養蜂場の予算 = 100000
	生け簀の予算 = 1000000
	自動投資 = 0
ENDIF

;減額率が0なら1にする
CALL SETMAX, 減額率, 1

IF 馬の状態
	;1日の出費は5万円±5千円とする
	出費 = RAND(45000, 55000)
	;減額率で計算
	出費 = 出費*(100-減額率)/100
	
	;予算が足りないと状態が悪くなる 1日で最大10 乱数次第では増えたりもする
	IF 出費 > 牧場の予算 && 自動投資
		IF MONEY >= 出費
			CALL PASELIL, @"馬の育成費用、{出費}＄を牧場の予算に繰り入れました"
			MONEY -= 出費
			牧場の予算 += 出費
		ELSE
			PRINTL 所持金が足りないため、自動投資ができませんでした
		ENDIF
	ENDIF
	IF 出費 > 牧場の予算
		;状態が3以下の場合は1日1づつ下がっていき、0で全滅する
		IF 馬の状態 <= 3
			馬の状態--
		ELSE
			状態計算用 = MAX(10-(飼育レベル計算用/20), 1)
			;乱数で上下する ゆくゆくは気温や天候などでやりたい
			状態計算用 += RAND:3
			馬の状態 -= 状態計算用
			SIF 馬の状態 <= 3
				馬の状態 = 3
		ENDIF
	;予算が足りてると状態が良くなる
	ELSE
		状態計算用 = MAX(飼育レベル計算用/20, 1)
		;乱数で上下する ゆくゆくは気温や天候などでやりたい
		状態計算用 += RAND:3
		馬の状態 += 状態計算用
	ENDIF
	牧場の予算 -= 出費
	;飼育レベル次第で状態の最大値が決まる 条件はゆるめ
	SELECTCASE 飼育レベル計算用
		CASE 0
			CALL SETMIN, 馬の状態, 50
		CASE IS < 10
			CALL SETMIN, 馬の状態, 60
		CASE IS < 20
			CALL SETMIN, 馬の状態, 70
		CASE IS < 30
			CALL SETMIN, 馬の状態, 80
		CASE IS < 40
			CALL SETMIN, 馬の状態, 90
		CASEELSE
			CALL SETMIN, 馬の状態, 100
	ENDSELECT
	IF 馬の状態 == 0
		PRINTL 馬たちは飢餓で全滅しました……
		動物の死亡++
	ENDIF
ENDIF

;以下馬の計算とほぼ同じ
IF 牛の状態
	;1日の出費は5万円±5千円とする
	出費 = RAND(45000, 55000)
	;減額率で計算
	出費 = 出費*(100-減額率)/100
	
	IF 出費 > 牧場の予算 && 自動投資
		IF MONEY >= 出費
			CALL PASELIL, @"牛の育成費用、{出費}＄を牧場の予算に繰り入れました"
			MONEY -= 出費
			牧場の予算 += 出費
		ELSE
			PRINTL 所持金が足りないため、自動投資ができませんでした
		ENDIF
	ENDIF
	;予算が足りないと状態が悪くなる 1日で最大10 乱数次第では増えたりもする
	IF 出費 > 牧場の予算
		;状態が3以下の場合は1日1づつ下がっていき、0で全滅する
		IF 牛の状態 <= 3
			牛の状態--
		ELSE
			状態計算用 = MAX(10-(飼育レベル計算用/20), 1)
			;乱数で上下する ゆくゆくは気温や天候などでやりたい
			状態計算用 += RAND:3
			牛の状態 -= 状態計算用
			SIF 牛の状態 <= 3
				牛の状態 = 3
		ENDIF
	;予算が足りてると状態が良くなる
	ELSE
		状態計算用 = MAX(飼育レベル計算用/20, 1)
		;乱数で上下する ゆくゆくは気温や天候などでやりたい
		状態計算用 += RAND:3
		牛の状態 += 状態計算用
	ENDIF
	牧場の予算 -= 出費
	;飼育レベル次第で状態の最大値が決まる 条件はゆるめ
	SELECTCASE 飼育レベル計算用
		CASE 0
			CALL SETMIN, 牛の状態, 50
		CASE IS < 10
			CALL SETMIN, 牛の状態, 60
		CASE IS < 20
			CALL SETMIN, 牛の状態, 70
		CASE IS < 30
			CALL SETMIN, 牛の状態, 80
		CASE IS < 40
			CALL SETMIN, 牛の状態, 90
		CASEELSE
			CALL SETMIN, 牛の状態, 100
	ENDSELECT
	SIF 牛の状態 >= 80
		ITEM:牛乳 = 1
	IF 牛の状態 == 0
		PRINTL 牛たちは飢餓で全滅しました……
		動物の死亡++
	ENDIF
ENDIF

IF 羊の状態
	;1日の出費は2万円±2千円とする
	出費 = RAND(18000, 22000)
	;減額率で計算
	出費 = 出費*(100-減額率)/100
	
	IF 出費 > 牧場の予算 && 自動投資
		IF MONEY >= 出費
			CALL PASELIL, @"羊の育成費用、{出費}＄を牧場の予算に繰り入れました"
			MONEY -= 出費
			牧場の予算 += 出費
		ELSE
			PRINTL 所持金が足りないため、自動投資ができませんでした
		ENDIF
	ENDIF
	;予算が足りないと状態が悪くなる 1日で最大10 乱数次第では増えたりもする
	IF 出費 > 牧場の予算
		;状態が3以下の場合は1日1づつ下がっていき、0で全滅する
		IF 羊の状態 <= 3
			羊の状態--
		ELSE
			状態計算用 = MAX(10-(飼育レベル計算用/20), 1)
			;乱数で上下する ゆくゆくは気温や天候などでやりたい
			状態計算用 += RAND:3
			羊の状態 -= 状態計算用
			SIF 羊の状態 <= 3
				羊の状態 = 3
		ENDIF
	;予算が足りてると状態が良くなる
	ELSE
		状態計算用 = MAX(飼育レベル計算用/20, 1)
		;乱数で上下する ゆくゆくは気温や天候などでやりたい
		状態計算用 += RAND:3
		羊の状態 += 状態計算用
	ENDIF
	牧場の予算 -= 出費
	;飼育レベル次第で状態の最大値が決まる 条件はゆるめ
	SELECTCASE 飼育レベル計算用
		CASE 0
			CALL SETMIN, 羊の状態, 50
		CASE IS < 10
			CALL SETMIN, 羊の状態, 60
		CASE IS < 20
			CALL SETMIN, 羊の状態, 70
		CASE IS < 30
			CALL SETMIN, 羊の状態, 80
		CASE IS < 40
			CALL SETMIN, 羊の状態, 90
		CASEELSE
			CALL SETMIN, 羊の状態, 100
	ENDSELECT
	SIF 羊の状態 >= 80
		ITEM:チーズ = 1
	IF 羊の状態 == 0
		PRINTL 羊たちは飢餓で全滅しました……
		動物の死亡++
	ENDIF
ENDIF

IF ユニコーンの状態
	;ユニコーンとバイコーンは出費無し
	;アライメントが純潔寄りで合計50未満、もしくは飼育レベル50未満だと居なくなる
	IF 特殊馬アライメント合計 < 50 || ユニコーン飼育レベル < 50
		PRINTL 飼育係をお気に召さないユニコーンは、どこかに逃げ出してしまった……
		ユニコーンの状態 = 0
		GOTO 特殊馬終了
	ENDIF
	;状態は(アライメント+飼育レベル-50)/2で決まる
	ユニコーンの状態 = (特殊馬アライメント合計+ユニコーン飼育レベル-50)/2
	CALL SETMIN, ユニコーンの状態, 100
ELSEIF 特殊馬アライメント合計 >= 50 && ユニコーン飼育レベル >= 50 && ITEM:牧場
	PRINTL どこからかやってきたユニコーンが牧場に住み着いたようだ
	ユニコーンの状態 = (特殊馬アライメント合計+ユニコーン飼育レベル-50)/2
	CALL SETMIN, ユニコーンの状態, 100
ENDIF

IF バイコーンの状態
	;ユニコーンとバイコーンは出費無し
	;アライメントが不純寄りで合計-300未満、もしくは飼育レベル100未満だと居なくなる
	IF 特殊馬アライメント合計 > -300 || バイコーン飼育レベル < 100
		PRINTL 飼育係をお気に召さないバイコーンは、どこかに逃げ出してしまった……
		バイコーンの状態 = 0
		GOTO 特殊馬終了
	ENDIF
	;状態は(ABS(アライメント)/5+飼育レベル-100)/2で決まる
	バイコーンの状態 = (ABS(特殊馬アライメント合計)/5+バイコーン飼育レベル-100)/2
	CALL SETMIN, バイコーンの状態, 100
ELSEIF 特殊馬アライメント合計 <= -300 && バイコーン飼育レベル >= 100 && ITEM:牧場
	PRINTL どこからかやってきたバイコーンが牧場に住み着いたようだ
	バイコーンの状態 = (ABS(特殊馬アライメント合計)/5+バイコーン飼育レベル-100)/2
	CALL SETMIN, バイコーンの状態, 100
ENDIF

$特殊馬終了

IF 豚の状態
	;1日の出費は5万円±5千円とする
	出費 = RAND(45000, 55000)
	;減額率で計算
	出費 = 出費*(100-減額率)/100
	
	IF 出費 > 畜舎の予算 && 自動投資
		IF MONEY >= 出費
			CALL PASELIL, @"豚の育成費用、{出費}＄を畜舎の予算に繰り入れました"
			MONEY -= 出費
			畜舎の予算 += 出費
		ELSE
			PRINTL 所持金が足りないため、自動投資ができませんでした
		ENDIF
	ENDIF
	;予算が足りないと状態が悪くなる 1日で最大10 乱数次第では増えたりもする
	IF 出費 > 畜舎の予算
		;状態が3以下の場合は1日1づつ下がっていき、0で全滅する
		IF 豚の状態 <= 3
			豚の状態--
		ELSE
			状態計算用 = MAX(10-(飼育レベル計算用/20), 1)
			;乱数で上下する ゆくゆくは気温や天候などでやりたい
			状態計算用 += RAND:3
			豚の状態 -= 状態計算用
			SIF 豚の状態 <= 3
				豚の状態 = 3
		ENDIF
	;予算が足りてると状態が良くなる
	ELSE
		状態計算用 = MAX(飼育レベル計算用/20, 1)
		;乱数で上下する ゆくゆくは気温や天候などでやりたい
		状態計算用 += RAND:3
		豚の状態 += 状態計算用
	ENDIF
	畜舎の予算 -= 出費
	;飼育レベル次第で状態の最大値が決まる 条件はゆるめ
	SELECTCASE 飼育レベル計算用
		CASE 0
			CALL SETMIN, 豚の状態, 50
		CASE IS < 10
			CALL SETMIN, 豚の状態, 60
		CASE IS < 20
			CALL SETMIN, 豚の状態, 70
		CASE IS < 30
			CALL SETMIN, 豚の状態, 80
		CASE IS < 40
			CALL SETMIN, 豚の状態, 90
		CASEELSE
			CALL SETMIN, 豚の状態, 100
	ENDSELECT
	IF 豚の状態 == 0
		PRINTL 豚たちは飢餓で全滅しました……
		動物の死亡++
	ENDIF
ENDIF

IF 鶏の状態
	;1日の出費は1万円±1千円とする
	出費 = RAND(9000, 11000)
	;減額率で計算
	出費 = 出費*(100-減額率)/100
	
	IF 出費 > 畜舎の予算 && 自動投資
		IF MONEY >= 出費
			CALL PASELIL, @"鶏の育成費用、{出費}＄を畜舎の予算に繰り入れました"
			MONEY -= 出費
			畜舎の予算 += 出費
		ELSE
			PRINTL 所持金が足りないため、自動投資ができませんでした
		ENDIF
	ENDIF
	;予算が足りないと状態が悪くなる 1日で最大10 乱数次第では増えたりもする
	IF 出費 > 畜舎の予算
		;状態が3以下の場合は1日1づつ下がっていき、0で全滅する
		IF 鶏の状態 <= 3
			鶏の状態--
		ELSE
			状態計算用 = MAX(10-(飼育レベル計算用/20), 1)
			;乱数で上下する ゆくゆくは気温や天候などでやりたい
			状態計算用 += RAND:3
			鶏の状態 -= 状態計算用
			SIF 鶏の状態 <= 3
				鶏の状態 = 3
		ENDIF
	;予算が足りてると状態が良くなる
	ELSE
		状態計算用 = MAX(飼育レベル計算用/20, 1)
		;乱数で上下する ゆくゆくは気温や天候などでやりたい
		状態計算用 += RAND:3
		鶏の状態 += 状態計算用
	ENDIF
	畜舎の予算 -= 出費
	;飼育レベル次第で状態の最大値が決まる 条件はゆるめ
	SELECTCASE 飼育レベル計算用
		CASE 0
			CALL SETMIN, 鶏の状態, 50
		CASE IS < 10
			CALL SETMIN, 鶏の状態, 60
		CASE IS < 20
			CALL SETMIN, 鶏の状態, 70
		CASE IS < 30
			CALL SETMIN, 鶏の状態, 80
		CASE IS < 40
			CALL SETMIN, 鶏の状態, 90
		CASEELSE
			CALL SETMIN, 鶏の状態, 100
	ENDSELECT
	SIF 鶏の状態 >= 80
		ITEM:卵 = 1
	IF 鶏の状態 == 0
		PRINTL 鶏たちは飢餓で全滅しました……
		動物の死亡++
	ENDIF
ENDIF

IF 蜂の状態
	;1日の出費は5000円±500円とする
	出費 = RAND(4500, 5500)
	;減額率で計算
	出費 = 出費*(100-減額率)/100

	IF 出費 > 養蜂場の予算 && 自動投資
		IF MONEY >= 出費
			CALL PASELIL, @"蜂の育成費用、{出費}＄を養蜂場の予算に繰り入れました"
			MONEY -= 出費
			養蜂場の予算 += 出費
		ELSE
			PRINTL 所持金が足りないため、自動投資ができませんでした
		ENDIF
	ENDIF
	;予算が足りないと状態が悪くなる 1日で最大10 乱数次第では増えたりもする
	IF 出費 > 養蜂場の予算
		;状態が3以下の場合は1日1づつ下がっていき、0で全滅する
		IF 蜂の状態 <= 3
			蜂の状態--
		ELSE
			状態計算用 = MAX(10-(飼育レベル計算用/20), 1)
			;乱数で上下する ゆくゆくは気温や天候などでやりたい
			状態計算用 += RAND:3
			蜂の状態 -= 状態計算用
			SIF 蜂の状態 <= 3
				蜂の状態 = 3
		ENDIF
	;予算が足りてると状態が良くなる
	ELSE
		状態計算用 = MAX(飼育レベル計算用/20, 1)
		;乱数で上下する ゆくゆくは気温や天候などでやりたい
		状態計算用 += RAND:3
		蜂の状態 += 状態計算用
	ENDIF
	養蜂場の予算 -= 出費
	;飼育レベル次第で状態の最大値が決まる 条件はゆるめ
	SELECTCASE 飼育レベル計算用
		CASE 0
			CALL SETMIN, 蜂の状態, 50
		CASE IS < 10
			CALL SETMIN, 蜂の状態, 60
		CASE IS < 20
			CALL SETMIN, 蜂の状態, 70
		CASE IS < 30
			CALL SETMIN, 蜂の状態, 80
		CASE IS < 40
			CALL SETMIN, 蜂の状態, 90
		CASEELSE
			CALL SETMIN, 蜂の状態, 100
	ENDSELECT
	IF 蜂の状態 == 0
		PRINTL 蜂たちは病気で全滅しました……
		動物の死亡++
	ENDIF
ENDIF

SIF ITEM:触手使役術
	ITEM:触手肉 = 1

IF ITEM:生け簀
	出費 = 0
	FOR LCOUNT, 1, 5
		SIF 生け簀の養殖:LCOUNT != ""
			出費 += ITEMPRICE:(生け簀の養殖:LCOUNT)
	NEXT
	SIF 出費 == 0
		GOTO 養殖無し
	
	養殖中 = 1
	
	出費 = 出費*(100-減額率)/100
	IF 出費 > 生け簀の予算 && 自動投資
		IF MONEY >= 出費
			CALL PASELIL, @"魚の育成費用、{出費}＄を生け簀の予算に繰り入れました"
			MONEY -= 出費
			生け簀の予算 += 出費
		ELSE
			PRINTL 所持金が足りないため、自動投資ができませんでした
		ENDIF
	ENDIF
	IF 生け簀の予算 < 出費
		FOR LCOUNT, 1, 5
			IF 生け簀の養殖:LCOUNT != ""
				IF 生け簀の状態:LCOUNT == 0
					PRINTFORML 生け簀の予算不足のため、%生け簀の養殖:LCOUNT%の収穫ができませんでした
					生け簀の状態:LCOUNT = 1
				ELSE
					PRINTFORML 生け簀の予算不足のため、%生け簀の養殖:LCOUNT%の養殖ができませんでした
				ENDIF
			ENDIF
		NEXT
	ELSE
		FOR LCOUNT, 1, 5
			IF 生け簀の養殖:LCOUNT != ""
				IF 生け簀の状態:LCOUNT > 0
					SIF --生け簀の状態:LCOUNT == 0
						PRINTFORML %生け簀の養殖:LCOUNT%が収穫可能になりました
				ENDIF
			ENDIF
		NEXT
		生け簀の予算 -= 出費
	ENDIF
ENDIF
$養殖無し

IF 牧場の予算 < 0
	PRINTL 牧場の予算が不足しています。補充しましょう
	牧場の予算 = 0
ENDIF
IF 畜舎の予算 < 0
	PRINTL 畜舎の予算が不足しています。補充しましょう
	畜舎の予算 = 0
ENDIF
IF 養蜂場の予算 < 0
	PRINTL 養蜂場の予算が不足しています。補充しましょう
	養蜂場の予算 = 0
ENDIF

;モチベ計算用にもう一度回す
FOR LCOUNT, 0, CHARANUM
	IF CSTR:LCOUNT:配属 == "畜産業"
		モチベ計算用 = 0
		FOR LCOUNT2, 0, VARSIZE("TALENT")
			SIF !TALENT:LCOUNT:LCOUNT2
				CONTINUE
			SELECTCASE TALENTNAME:LCOUNT2
				CASE "服従", "隷属", "ハイテンション", "世話好き", "好奇心", "楽観的", "恥薄い", "献身的", "幼稚"
					モチベ計算用++
				CASE "臆病", "気丈", "悲観的", "汚臭敏感", "潔癖症", "犬嫌い", "猫嫌い"
					モチベ計算用--
			ENDSELECT
		NEXT
		SELECTCASE CSTR:LCOUNT:種族
			CASE "獣人", "獣", "人魚"
				モチベ計算用++
			CASE "ヴァンパイア"
				モチベ計算用--
		ENDSELECT
		;予算がたくさん(7割以上)あるとモチベも上がる 養蜂場は例外
		SIF 牧場の予算 >= 700000
			モチベ計算用++
		SIF 畜舎の予算 >= 700000
			モチベ計算用++
		SIF 生け簀の予算 >= 700000
			モチベ計算用++
		;動物が死んでるとモチベ激減する
		モチベ計算用 -= 動物の死亡*50
		モチベ合計値 = CFLAG:LCOUNT:モチベーション+モチベ計算用+世話好き人数
		SIF TALENT:LCOUNT:世話好き
			モチベ合計値 -= 世話好き人数
		;配属先のキャラの相性で計算
		モチベ合計値 += 相性モチベ補正(LCOUNT)
		CFLAG:LCOUNT:モチベーション = LIMIT(モチベ合計値, 1, 100)
		;経験も加算しとく
		EXP:LCOUNT:飼育経験 += (馬の状態>0)+(牛の状態>0)+(羊の状態>0)+(豚の状態>0)+(鶏の状態>0)+(蜂の状態>0)+養殖中
		;習得の加算
		JUEL:LCOUNT:習得 += CFLAG:LCOUNT:モチベーション*10
	ENDIF
NEXT


CALL CHECKDRAWLINEW

;IF メッセージ表示
;	WAIT
;ELSE
;	PRINTW 畜産業の方は特に変わったことは無かったようだ
;ENDIF

;新婚モード
IF ゲームモード() == "新婚モード" && FINDCHARA(CFLAG:嫁, 1) >= 0
	CSTR:MASTER:配属 = 
	CSTR:FINDCHARA(CFLAG:嫁, 1):配属 = 
	牧場の予算 = 1000000
	畜舎の予算 = 1000000
	養蜂場の予算 = 100000
	生け簀の予算 = 1000000
ENDIF

@飼育レベル, ARG
#FUNCTION
#DIM DYNAMIC LCOUNT
#DIM DYNAMIC 計算用

FOR LCOUNT, 0, VARSIZE("TALENT")
	SIF !TALENT:ARG:LCOUNT
		CONTINUE
	SELECTCASE TALENTNAME:LCOUNT
		CASE "気丈", "冷静", "自制心", "好奇心", "解放", "治療", "汚れ無視"
			計算用++
		CASE "臆病", "衝動的", "弱気", "無関心", "貞操観念", "恥じらい", "汚臭敏感", "潔癖症", "犬嫌い", "猫嫌い"
			計算用--
		CASE "世話好き"
			計算用 += 2
	ENDSELECT
NEXT

SELECTCASE CSTR:ARG:種族
	CASE "獣人", "獣"
		計算用 += 3
	CASE "ヴァンパイア"
		計算用 -= 2
	CASE "精霊", "妖精"
		計算用++
ENDSELECT

計算用 += ABL:ARG:飼育技能+特質("ワーカホリック", ARG)/10
SIF 統率者("畜産業") && !TALENT:ARG:統率
	計算用++

RETURNF MAX(計算用, 0)

@養殖レベル, ARG
#FUNCTION
#DIM DYNAMIC LCOUNT
#DIM DYNAMIC 計算用

FOR LCOUNT, 0, VARSIZE("TALENT")
	SIF !TALENT:ARG:LCOUNT
		CONTINUE
	SELECTCASE TALENTNAME:LCOUNT
		CASE "ドラゴン使い"
			計算用++
		CASE "猫"
			計算用 -= 2
		CASE "世話好き"
			計算用 += 2
	ENDSELECT
NEXT

SELECTCASE CSTR:ARG:種族
	CASE "人魚"
		計算用 += 2
	CASE "精霊", "妖精"
		計算用++
	CASE "鳳凰", "ヴァンパイア"
		計算用--
ENDSELECT
IF 統率者("畜産業") && !TALENT:ARG:統率
	計算用 += (ABL:ARG:飼育技能+1+(特質("ワーカホリック", ARG)/10))/2
ELSE
	計算用 += ABL:ARG:飼育技能+(特質("ワーカホリック", ARG)/10)/2
ENDIF

RETURNF MAX(計算用, 0)

;ユニコーン(+)、バイコーン(-)出現イベント用のポイント
@特殊馬アライメント, ARG
#FUNCTION
#DIM DYNAMIC LCOUNT
#DIM DYNAMIC 計算用

FOR LCOUNT, 0, VARSIZE("TALENT")
	SIF !TALENT:ARG:LCOUNT
		CONTINUE
	SELECTCASE TALENTNAME:LCOUNT
		CASE "処女", "去勢済み", "童貞"
			計算用 += 20
		;再生処女でもユニコーンは騙せる
		CASE "再生処女", "貞操観念", "快感の否定", "小柄体型"
			計算用 += 5
		CASE "既婚者", "淫乱", "貞操無頓着", "快感に素直", "即落ち", "淫核", "淫膣", "淫尻", "淫乳", "両刀", "ふたなり"
			計算用 -= 5
		CASE "娼婦", "ヤンデレ", "性器破損", "狂気", "母性"
			計算用 -= 10
		CASE "傷物"
			計算用 -= MAX(TALENT:ARG:傷物, 10)
		CASE "素直", "臆病", "気丈", "自制心", "無関心", "保守的", "男嫌い", "女嫌い", "同族嫌悪", "戦士"
			計算用 += 3
		CASE "プライド高い", "好奇心", "濡れにくい"
			計算用 += 1
		CASE "プライド低い", "サボり魔", "浪費癖", "目立ちたがり", "解放", "濡れやすい", "自慰しやすい", "中毒しやすい", "男好き", "女好き", "ネクロマンサー"
			計算用 -= 3
		CASE "舌使い", "おもらし癖", "サド", "マゾ", "遊び人"
			計算用 -= 1
	ENDSELECT
NEXT

計算用 -= (ABL:ARG:Ｃ感覚+ABL:ARG:Ｖ感覚+ABL:ARG:Ａ感覚+ABL:ARG:Ｂ感覚)/2
計算用 -= ABL:ARG:欲望

;世話好きはプラマイ助長
SIF TALENT:ARG:世話好き
	計算用 += 5*SIGN(計算用)

SELECTCASE CSTR:ARG:種族
	CASE "天使"
		計算用 += 10
	CASE "悪魔"
		計算用 -= 10
ENDSELECT

RETURNF 計算用

@MANUAL_畜産業
DRAWLINE
PRINTL □畜産業について
PRINTL 　[1] - 畜産業のシステム
PRINTL 　[2] - 
DRAWLINE
PRINTPLAIN 　畜産業　
PRINTL [0] - 戻る

DO
	INPUT
	SELECTCASE RESULT
		CASE 0
			RETURN
		CASE 1
			PRINTL 
	ENDSELECT
LOOP 1

