
(キャラ名)または(主人キャラ名)を置換して使用のこと
通常の口上は(キャラ名)の関数のみでいい (主人キャラ名)は主人用口上
全ての口上用関数はOPTION:口上表示とCFLAG:口上非表示の条件を通った状態で呼び出されるためここの判定は不要
口上用のキャラ変数「FEVE」「FCOM」「FPALAM」「FEX」が用意されている 主人用口上の場合はERHで個別に定義推奨

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    調教中に表示される関数
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
--------------------------------------------------
  口上存在判定
--------------------------------------------------
@EXIST_KOJO_(キャラ名)
@EXIST_MASTER_KOJO_(主人キャラ名)
@EXIST_WEDDING_KOJO_(キャラ名)
@EXIST_WEDDING_MASTER_KOJO_(主人キャラ名)
@EXIST_STRATEGY_KOJO_(キャラ名)
	この関数が存在するとキャラ選択時にハイライト表示される
	順に奴隷購入時、主人選択時、新婚モード嫁選択時、新婚モード主人選択時、パートナー選択時
	処理は読み込まれない

--------------------------------------------------
  調教開始および終了
--------------------------------------------------
@KOJO_START_(キャラ名)
@KOJO_TURNEND_(キャラ名)
@MASTER_START_(主人キャラ名)
@MASTER_TURNEND_(主人キャラ名)
	調教開始、終了時に表示
	☆先頭にDRAWLINE推奨
	☆CFLAG:憑依 >= 0でRETURN推奨
	☆イベントの初回発生時など用の変数「FEVE」が用意されている 0から99まで

--------------------------------------------------
  コマンド実行時
--------------------------------------------------
@KOJO_COM_(キャラ名)
@MASTER_COM_(主人キャラ名)
	コマンド実行時に呼び出される関数 この関数から地の文関数とそれぞれのコマンド口上を呼び出す
	☆地の文関数→口上非表示条件でのRETURN→口上関数 の順推奨
	☆初回実行用の変数「FCOM」が用意されている 0から999まで
	★構文例は下記
		TRYCALLFORM MESSAGE_COM_%SELECTCOMS%
		SIF CFLAG:憑依 >= 0 && (TEQUIP:ボールギャグ && SELECTCOMS != "ボールギャグ")
			RETURN
		;SIF PLAYER != MASTER
		;	RETURN
		TRYCALLFORM COM_%SELECTCOMS%_(キャラ名)

@COM_(コマンド名)_(キャラ名)
@MASTER_COM_(コマンド名)_(主人キャラ名)
	コマンド別関数 一部コマンドの挙動に関しては別テキスト参照

--------------------------------------------------
  調教者射精
--------------------------------------------------
@KOJO_MESSAGE_SHOOT_(キャラ名)
@MASTER_SHOOT_(主人キャラ名)
	調教者が射精した時に表示
	☆地の文関数→口上非表示条件でのRETURN→口上関数 の順推奨
	★構文例は下記
		TRYCALL SHOOT_MESSAGE
		SIF CFLAG:憑依 >= 0 && (TEQUIP:ボールギャグ && SELECTCOMS != "ボールギャグ")
			RETURN
		;SIF PLAYER != MASTER
		;	RETURN
		IF NOWEX:PLAYER:射精
			;【ここに本文】
		ENDIF

--------------------------------------------------
  触手射精
--------------------------------------------------
@KOJO_MESSAGE_TSHOOT_(主人キャラ名)
@MASTER_TSHOOT_KX1
	触手が射精した時に表示
	☆地の文関数→口上非表示条件でのRETURN→口上関数 の順推奨
	★構文例は下記
		TRYCALL TSHOOT_MESSAGE
		SIF CFLAG:憑依 >= 0 && (TEQUIP:ボールギャグ && SELECTCOMS != "ボールギャグ")
			RETURN
		;SIF PLAYER != MASTER
		;	RETURN
		IF NOWEX:PLAYER:触手射精
			;【ここに本文】
		ENDIF

--------------------------------------------------
  奴隷絶頂
--------------------------------------------------
@KOJO_MESSAGE_EX_(キャラ名)
@MASTER_EX_(主人キャラ名)
	奴隷が絶頂した時に表示
	☆地の文関数→口上非表示条件でのRETURN→口上関数 の順推奨
	☆絶頂の初回判定用の変数「FEX」が用意されている 0から9まで
	★構文例は下記
		TRYCALL EX_MESSAGE
		SIF CFLAG:憑依 >= 0 && (TEQUIP:ボールギャグ && SELECTCOMS != "ボールギャグ")
			RETURN
		;SIF PLAYER != MASTER
		;	RETURN
		IF NOWEX:Ｃ絶頂
			;【ここに本文】
		ENDIF
		IF NOWEX:Ｖ絶頂
			;【ここに本文】
		ENDIF
		IF NOWEX:Ａ絶頂
			;【ここに本文】
		ENDIF
		IF NOWEX:Ｂ絶頂
			;【ここに本文】
		ENDIF
		IF NOWEX:噴乳
			;【ここに本文】
		ENDIF
		IF NOWEX:射精
			;【ここに本文】
		ENDIF
		IF NOWEX:潮噴き
			;【ここに本文】
		ENDIF
		IF NOWEX:放尿
			;【ここに本文】
		ENDIF

--------------------------------------------------
  コマンド実行後
--------------------------------------------------
@KOJO_MESSAGE_AFTER_(キャラ名)
@MASTER_AFTER_(主人キャラ名)
	コマンド実行後、射精や絶頂などの口上が表示された後に表示
	主に処女喪失後のテキストなどに使用
	☆地の文関数→口上非表示条件でのRETURN→口上関数 の順推奨
	★構文例は下記
		TRYCALL AFTER_MESSAGE
		SIF CFLAG:憑依 >= 0 && (TEQUIP:ボールギャグ && SELECTCOMS != "ボールギャグ")
			RETURN
		;SIF PLAYER != MASTER
		;	RETURN
		IF TFLAG:コマンド破瓜
			IF TFLAG:恋慕処女
				;【ここに本文】
			ELSE
				;【ここに本文】
			ENDIF
		ENDIF

--------------------------------------------------
  パラメータ変化
--------------------------------------------------
@KOJO_MESSAGE_PALAM_(キャラ名)
@MASTER_PALAM_(主人キャラ名)
	奴隷のパラメータが変化した後に表示
	☆地の文関数→口上非表示条件でのRETURN→口上関数 の順推奨
	☆初回変動記録用の変数「FPALAM」が用意されている 0から9まで
	★構文例は下記
		TRYCALL PALAM_MESSAGE
		SIF CFLAG:憑依 >= 0 && (TEQUIP:ボールギャグ && SELECTCOMS != "ボールギャグ")
			RETURN
		;SIF PLAYER != MASTER
		;	RETURN
		IF PALAM:潤滑+UP:潤滑 > PALAMLV:4 && FPALAM:0 == 0
			IF GROUPMATCH(SELECTCOMS, "ローション", "ローション注入", "蜂蜜ローション")
				;【ここに本文】
			ELSE
				;【ここに本文】
			ENDIF
			FPALAM:0 = 1
		ENDIF
		IF PALAM:欲情+UP:欲情 > PALAMLV:3 && FPALAM:1 == 0
			IF SELECTCOMS == "媚薬"
				;【ここに本文】
			ELSE
				;【ここに本文】
			ENDIF
			FPALAM:1 = 1
		ENDIF
		IF PALAM:屈服+UP:屈服 > PALAMLV:3 && FPALAM:2 == 0
				;【ここに本文】
			FPALAM:2 = 1
		ENDIF
		IF PALAM:恭順+UP:恭順 > PALAMLV:3 && FPALAM:3 == 0
				;【ここに本文】
			FPALAM:3 = 1
		ENDIF
		IF PALAM:恐怖+UP:恐怖 > PALAMLV:3 && FPALAM:4 == 0
				;【ここに本文】
			FPALAM:4 = 1
		ENDIF

--------------------------------------------------
  刻印取得
--------------------------------------------------
@KOJO_MESSAGE_MARK_(キャラ名), ARG
@MASTER_MARK_(主人キャラ名), ARG
	刻印取得時に呼び出される関数 この関数から地の文関数とそれぞれの刻印取得口上を呼び出す
	☆地の文関数→口上非表示条件でのRETURN→口上関数 の順推奨
	☆初回変動記録用の変数「FPALAM」が用意されている 0から9まで
	★構文例は下記
		TRYCALLFORM MARK_MESSAGE_{ARG}
		SIF CFLAG:憑依 >= 0 && (TEQUIP:ボールギャグ && SELECTCOMS != "ボールギャグ")
			RETURN
		;SIF PLAYER != MASTER
		;	RETURN
		TRYCALLFORM MARK{ARG}_(キャラ名)

@MARK1_(キャラ名)
@MARK2_(キャラ名)
@MARK3_(キャラ名)
@MARK4_(キャラ名)
@MARK5_(キャラ名)
@MARK10_(キャラ名)
	それぞれ苦痛刻印、快楽刻印、屈服刻印（快楽）、屈服刻印（苦痛恐怖）、屈服刻印（屈服恭順）、反発刻印
	★構文例は下記（屈服刻印）
		SELECTCASE MARK:屈服刻印
			CASE 1
				;【ここに本文】
			CASE 2
				;【ここに本文】
			CASE 3
				;【ここに本文】
		ENDSELECT

--------------------------------------------------
  特殊コマンド
--------------------------------------------------
@KOJO_MESSAGE_USERCOM_(キャラ名), ARG
@MASTER_USERCOM_(主人キャラ名), ARG
	特殊コマンド実行時に呼び出される関数 この関数から地の文関数とそれぞれの特殊コマンド口上を呼び出す
	☆口上非表示条件でのRETURN→口上関数 の順推奨
	★構文例は下記
		TRYCALLFORM MESSAGE_USERCOM_{ARG}
		SIF CFLAG:憑依 >= 0
			RETURN
		TRYCALLFORM USERCOM_{ARG}_(キャラ名)

@USERCOM_900_(キャラ名)
@MASTER_USERCOM_900_(主人キャラ名)
	主人と助手が交代した時に表示される関数
	☆PLAYERがMASTERかASSIかで判定する 交代してから表示されるため主人→助手に交代した際PLAYERはASSI

@USERCOM_803_(キャラ名)
@MASTER_USERCOM_803_(主人キャラ名)
	服を着脱した時に表示される関数
	☆「TFLAG:服着脱」に着脱させた部位が入っている 着せたか脱がせたかはTEQUIPの状態で判定
	☆TFLAGの対応は下記
	0:特殊			1:上半身上着	2:下半身上着	3:全身上着
	4:上半身下着	5:下半身下着	6:足元
	10:全部脱がせた	11:全部着せた

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    調教外で表示される関数
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
--------------------------------------------------
  調教外イベント
--------------------------------------------------
@KOJO_EVENT_(キャラ名), ARGS
@MASTER_EVENT_(主人キャラ名), ARGS
	イベント発生時に呼び出される関数 この関数から地の文関数とそれぞれのイベント口上を呼び出す
	イベント別関数一覧に関しては別テキスト参照
	☆イベントによっては返り値を参照する場合があるため末尾にRETURN RESULTが必要
	★構文例は下記
		TRYCALLFORM EVENT_MESSAGE_%ARGS%
		SIF CFLAG:憑依 >= 0
			RETURN
		;SIF PLAYER != MASTER
		;	RETURN
		TRYCALLFORM EVENT_%ARGS%_(キャラ名)
		RETURN RESULT

--------------------------------------------------
  アイテム使用時
--------------------------------------------------
@KOJO_USE_ITEM_(キャラ名), ARGS
@MASTER_USE_ITEM_(主人キャラ名), ARGS
	アイテム使用時に呼び出される関数 この関数から地の文関数とそれぞれのアイテム使用時口上を呼び出す
	アイテム別関数一覧に関しては別テキスト参照
	★構文例は下記
		SIF CFLAG:憑依 >= 0
			RETURN 0
		TRYCALLFORM USE_ITEM_%ARGS%_(キャラ名)

--------------------------------------------------
  魔法詠唱時
--------------------------------------------------
@SPELLCAST_(キャラ名), 詠唱者, 対象:0, 対象:1
#DIM DYNAMIC 詠唱者
#DIM DYNAMIC 対象, 2
	SHOP画面からの魔法を詠唱した際に表示される関数
	☆文字列変数「詠唱魔法」に詠唱された魔法が入っている
	☆変数「詠唱者」に詠唱者（このキャラクター）のキャラ番号が入っている
	☆変数「対象」に魔法の対象者のキャラ番号が入っている
	★構文例は下記（適宜CASEを増やす）
		SELECTCASE 詠唱魔法
			CASE "ミラクル・スイート・スイーツ・マジック！！"
				;【ここに本文】
		ENDSELECT
		CALL SPELLCAST_地の文, 詠唱者, 対象:0, 対象:1

--------------------------------------------------
  魔法を受けた時
--------------------------------------------------
@RECIEVE_SPELLCAST_(キャラ名), 詠唱者, 対象:0, 対象:1
#DIM DYNAMIC 詠唱者
#DIM DYNAMIC 対象, 2
	SHOP画面からの魔法を受けた際に表示される関数
	☆文字列変数「詠唱魔法」に詠唱された魔法が入っている
	☆変数「詠唱者」に詠唱者のキャラ番号が入っている
	☆変数「対象」に魔法の対象者（どちらかがこのキャラクター）のキャラ番号が入っている
	★構文例は下記（適宜CASEを増やす）
		SELECTCASE 詠唱魔法
			CASE "ハニーバニー"
				;【ここに本文】
		ENDSELECT
		CALL SPELLCAST_地の文, 詠唱者, 対象:0, 対象:1

--------------------------------------------------
  かけられた魔法の効果が切れた時
--------------------------------------------------
@KOJO_SPELLEND_(魔法名)_(キャラ名)
	魔法の効果が切れた時に表示される関数 キャラはTARGET扱い
	ビーストモードの判定はTALENT:ファーリーを参照
	返り値に1を指定で「かけられた[魔法名]の効果が切れました」の部分が消える

--------------------------------------------------
  周回時
--------------------------------------------------
@KOJO_周回_(キャラ名)
	周回時に呼び出される関数 キャラ引き継ぎを確定させた後に表示
	引き継がなかった際に口上独自変数をリセットするなど
	☆キャラはTARGETではないためGETCHARANAMEなどを使って判定する
	★構文例は下記
		IF GETCHARANAME("(キャラ名)") >= 0
			;【引き継ぎ時の処理】
		ELSE
			;【引き継がなかった場合の処理】
		ENDIF

--------------------------------------------------
  新婚モード選択時
--------------------------------------------------
@WEDDING_(キャラ名)
	新婚モードで嫁を決定した時に表示 ご成婚おめでとうございますよりも前
	☆この関数の返り値で経験の有無の選択肢を制御可能
	  0:プレイヤーに選ばせる 1:経験あり 2:経験なし 3:経験変動なし
	☆初期経験をカスタマイズしたい場合は3

--------------------------------------------------
  エンディング
--------------------------------------------------
@KOJO_MESSAGE_ENDING_(キャラ名), ARG
	各エンディングに分岐するための関数 下記の命令を置く
		CALLFORM ENDING{ARG}_(キャラ名)

@ENDING1_(キャラ名)
@ENDING2_(キャラ名)
@ENDING3_(キャラ名)
	それぞれ親愛、娼婦、隷属のエンディング
	テンプレートは下記
		DRAWLINE
		PRINTFORMW ………………
		PRINTFORMW …………
		PRINTFORMW ……
		;PRINTFORMW ここに本文
		PRINTFORML 
		PRINTFORMW 　　　　　　　　―― Ending No.??? (○○エンド)

