;あまり親切な解説ではないため読めばわかる人向け
@DUMMYFUNC

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;    文章の表示
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	;文章は基本的に「PRINTFORML」を使って一行ずつ記述する
	;☆PRINTFORMLと文章の間の半角スペースは必須
;-----------------------------
PRINTFORML 一行目の文章
PRINTFORML 二行目の文章
PRINTFORML 三行目の文章

;-----------------------------
	;その行を表示した後にクリック等を待つ場合はLの部分を変えた「PRINTFORMW」を使う
	;表示される度にクリックが必要になるため文末だけに使ったり長い文章を3～4行ごとに表示するなどの工夫を推奨
	;★解説テキストの筆者はPRINTFORMWだけで大量に文章を書く事を推奨していません
;-----------------------------
PRINTFORML 一行目の文章（止まらない）
PRINTFORML 二行目の文章（止まらない）
PRINTFORMW 三行目の文章（ここで止まる）
PRINTFORML 四行目の文章（止まらない）
PRINTFORML 五行目の文章 これ自体は止まらないがこの下にある「WAIT」にクリック待ちの効果があるためPRINTFORMWと同じ動きをする
WAIT

;-----------------------------
	;記号でくくる事で文章内に変数の中身を表示する 通常の変数は{} 文字列変数は%%
	;☆「変数の解説」の項も参照
;-----------------------------
PRINTFORML %CALLNAME:TARGET% ←これが調教対象の名前
PRINTFORML %CALLNAME:MASTER% ←これが主人の名前
PRINTFORML %CALLNAME:PLAYER% ←これが調教者の名前 通常は主人だが助手の名前が入ることもある
PRINTFORML {ABL:TARGET:従順} ←これが調教対象の従順のレベル
PRINTFORMW {ITEM:ローション} ←これが今持っているローションの個数

;-----------------------------
	;結果が真か偽かの二択になる条件で表示される文章を変える場合「\@ (条件) ? (真のとき) # (偽のとき) \@」でIF構文を書かずに表示できる
	;難しそうだと感じたり中身が複雑でかえって見づらくなる場合はIF構文を使う事を推奨
	;☆「条件文の解説」の項も参照
;-----------------------------
PRINTFORML \@ ITEM:媚薬 >= 5 ? 媚薬が5個以上の時表示される文章 # 条件が成立していない（この場合媚薬が5個に満たない）場合表示される文章 \@
PRINTFORML 「%CALLNAME:MASTER%くん」 ←主人の名前があなただとこれは「あなたくん」になってしまう
PRINTFORML 「\@ 名前あり() ? %CALLNAME:MASTER%くん # きみ \@」 ←主人の名前があなたなら「きみ」、そうでないなら「（名前）くん」が表示される
PRINTFORMW 「\@ SEX(MASTER) == 1 ? お兄さん # お姉さん \@」 ←主人が男ならお兄さん、そうでないならお姉さん



;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;    条件文の解説
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	;条件が満たされているか否かで違う文章を表示する時には「IF (条件)」「ENDIF」でくくる これらは一行ずつ記述する必要がある
;-----------------------------
IF ITEM:媚薬 >= 5
	PRINTFORMW 媚薬が5個以上の時表示される文章
ENDIF

;-----------------------------
	;IFとENDIFの間に「ELSE」を入れることでELSE～ENDIFの間が「IFの条件が満たされていない場合」の意味になる
;-----------------------------
IF ITEM:媚薬 >= 5
	PRINTFORMW 媚薬が5個以上の時表示される文章
ELSE
	PRINTFORML 条件が成立していない（この場合媚薬が5個に満たない）場合表示される文章
	PRINTFORMW 上で紹介したものと同じだがIFを使えば一行だけでなく何行でも書くことができる
ENDIF

;-----------------------------
	;IFとELSEもしくはENDIFの間に「ELSEIF (条件)」を入れることで「上にある条件が満たされていないがこの条件は満たされている場合」の分岐が作れる
;-----------------------------
IF ITEM:媚薬 >= 5
	PRINTFORMW 媚薬が5個以上の時表示される文章
ELSEIF ITEM:媚薬 >= 1
	PRINTFORMW 5個はなかったけど最低でも1個はある時表示される文章
ELSEIF ITEM:ローション >= 1
	PRINTFORMW 媚薬はなかったけどローションならある時表示される文章
ELSE
	PRINTFORMW 媚薬もローションもなかった場合表示される文章
ENDIF

;-----------------------------
	;「SELECTCASE (変数名)」「ENDSELECT」変数の中身によって分岐を作る構文 IFを使うより簡単に記述できる場合がある
	;条件は「CASE (変数の中身)」で記述する 他のCASEとENDSELECTの間に「CASEELSE」を使えばどのCASEも当てはまらなかった場合になる
;-----------------------------
SELECTCASE ABL:TARGET:従順
	CASE 0
		PRINTFORMW 調教対象の従順のレベルが0の時表示される文章
	CASE 1
		PRINTFORMW 調教対象の従順のレベルが1の時表示される文章
	CASE 2, 3
		PRINTFORML 複数の条件は,で区切って同じCASEにすることもできる
		PRINTFORMW この文章は従順が2もしくは3の時表示される
	CASE 4 TO 6
		PRINTFORML このように書くと従順が4～6の意味になる
		PRINTFORMW 5は4以上6以下なので数字では書かれていなくても従順が5の場合これが表示されることになる
	CASE IS >= 7
		PRINTFORMW このように書くと従順が7以上の意味になる
	CASE 8
		PRINTFORML 従順が8の時表示される……ように思えるがIFやSELECTCASEは常に「上から順に判定される」ため
		PRINTFORML 実際に従順が8の時は既にこの直前の「CASE IS >= 7」が選ばれてしまっている
		PRINTFORMW このように分岐の順番に気を付けないと永遠に表示される事のない文章が発生してしまうことがある
	CASE 65535
		PRINTFORMW いくら数値を大きくしたところで7以上である限りは永遠に出ない
	CASEELSE
		PRINTFORML ここまでのどのCASEも当てはまらなかった場合表示される文章
		PRINTFORML これも表示されないように思えるが実はまだ従順レベルが0に満たない、つまりマイナスの可能性が残っている
		PRINTFORMW 基本的には従順が-1以下になる事はないが「CASE 8」の場合と違って万が一マイナスになったら表示される
ENDSELECT

SELECTCASE CSTR:TARGET:種族
	CASE "人間"
		PRINTFORML 調教対象の種族が人間の時表示される文章
		PRINTFORMW 完全一致している必要があるため「人間(？)」などでは表示されない
	CASE "獣人"
		PRINTFORMW 調教対象の種族が獣人の時表示される文章
	CASE ""
		PRINTFORMW もし空の文字列かどうか判定する必要がある場合このように書けば空とみなされる
	CASEELSE
		PRINTFORML ここまでのどのCASEも当てはまらなかった場合表示される文章
		PRINTFORMW SELECTCASEに文字列を使う場合は上記のように""でくくる必要がある事に注意
ENDSELECT

;-----------------------------
	;★SELECTCASEを使う事で等確率のランダム分岐を簡単に作ることができる
	;  「RAND:(数値)」を条件文に使うとランダムで0～(数値-1)に変換され、パターンは(数値)通りになる
;-----------------------------
SELECTCASE RAND:3
	CASE 0
		PRINTFORML 「RAND:3」が「0」に変換された時表示される文章
		PRINTFORMW 1からではなく0から始まる点に注意
	CASE 1
		PRINTFORMW 「RAND:3」が「1」に変換された時表示される文章
	CASE 2
		PRINTFORML 「RAND:3」が「2」に変換された時表示される文章
		PRINTFORMW RAND:3がとる数値は「0」「1」「2」の3通りなので分岐はこれで全てであり、CASE 3は存在しない
ENDSELECT



;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;    選択肢を作る
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	;選択肢を作るには命令「BINPUT」と変数「RESULT」を使う
	;まず「[]」の中に任意の数値を入れた文章を表示する（この時にPRINTFORMWやWAITを使ってはいけない）
	;次に「BINPUT」でボタン入力を待つ
	;入力されたらその結果は変数「RESULT」の中に入っているため、IFやSELECTCASEなどで分岐を作る
;-----------------------------
PRINTFORML []の中に数値が入っていれば自動的にボタンになってくれるため特別な記述はいらない
PRINTFORML [0] 赤の扉
PRINTFORML [1] 青の扉
PRINTFORML [2] 緑の扉
BINPUT
SELECTCASE RESULT
	CASE 0
		PRINTFORMW せっかくだから俺はこの赤の扉を選んだ時表示される文章
	CASE 1
		PRINTFORML 青の扉を選んだ時表示される文章
		PRINTFORML 選択肢を作る時にPRINTFORMWを使ってしまうと一旦そこで入力待ちが発生してしまい
		PRINTFORMW そこまでの[]はボタンとして判定されなくなってしまう
	CASE 2
		PRINTFORML 緑の扉を選んだ時表示される文章
		PRINTFORML もちろん選択肢の中でもボタンを作ってBINPUTできるのだ わかっているのか おい
		PRINTFORML [0] わかった
		PRINTFORML [1] はあ・・・
		BINPUT
		PRINTFORMW このように選択させるだけさせて分岐しない事もできる
ENDSELECT



;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;    変数の解説
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	;大きく分けて数値を入れるものと文字列を入れるものがある
	;「MONEY」「ABL（従順や欲望など）」「EXP（Ｖ経験など）」「JUEL（所持している珠）」これらは数値が入る変数
	;「NAME」「CALLNAME」「CSTR（種族名や服の名前など様々な情報）」これらは文字列が入る変数
;-----------------------------
PRINTFORML お金は数値なので{MONEY} NAMEは文字列なので%NAME:TARGET%
PRINTFORMW 変数をくくる記号を逆に書いてしまうとエラーが発生する

;-----------------------------
	;★ゲーム中に存在する全てのキャラクターには0から順番に番号が振られている
	;  対象選択など様々なキャラクターを選択する場面でキャラクターの横に振られている番号がそれにあたる
	;  キャラクターを調教対象に指定するとこの番号を「TARGET」という変数に入れる
;-----------------------------
PRINTFORML %CALLNAME:TARGET% ←TARGETが3番のキャラだった場合これは「CALLNAME:3」と同じ結果になる
PRINTFORMW {TARGET} ←つまりこうすると「3」が表示される

;-----------------------------
	;変数には「次元」が存在する場合がある 次元のある変数は「:」で次元が区切られている
	;「:」で区切られた一番左がその変数の名前（大きなくくり）で右に行くほど小さなくくりになる
;-----------------------------
PRINTFORML ABL:TARGET:従順 は「ABL」という名前の変数
PRINTFORML →その中に0から順番に住所が振られている
PRINTFORML →→さらにABLの中のTARGET番目の中にも0から順番に住所が振られている という構造になっている
WAIT
PRINTFORML またこの「従順」はCALLNAME:TARGETにおけるTARGETとは違って従順という名前の変数に数値が入っている訳ではない
PRINTFORML コードを書く時わかりやすいように変数の住所に名前をつける機能があり、「ABL:TARGET:(この場所)」の0番目を「従順」と呼ぶように設定されている
PRINTFORML {ABL:3:0} ←つまりTARGETが3番のキャラだった場合これはTARGETの従順の事を指している
PRINTFORMW 一見何を意味しているかわからないため名前がつけられているものは直接番号を指定せず名前で呼ぶ事を推奨

;-----------------------------
	;変数の次元は省略して書く事ができる
	;変数「MONEY」には実は次元があり、「MONEY:0」「MONEY:1」「MONEY:2」などが内部には存在している（実際には使われていない）
	;「:」の右側を省略するとその部分は全て0であるとみなされる
;-----------------------------
PRINTFORML {MONEY} {MONEY:0} ←これはどっちも同じ
PRINTFORMW {MONEY} {MONEY:1} ←これは違う

;-----------------------------
	;「ABL」「EXP」「CSTR」などキャラクターが持っている要素の変数は次元省略の解釈が特殊
	;キャラクター変数は次元省略があると必ずTARGETのものであると解釈される
;-----------------------------
PRINTFORML {ABL:従順} ←これは「ABL:TARGET:従順」と解釈される
PRINTFORMW {ABL:0} ←これは「ABL:TARGET:0」、つまり上の行と同じように解釈される
PRINTFORML {ABL:1} ←この流れならわかるようにこれは「ABL:TARGET:1」、TARGETの欲望を指す
PRINTFORML 1番目のキャラの0（従順）にはならないがキャラクター変数ではない変数で同じ記述をしていたらこれは(変数名):1:0になっている
PRINTFORMW 口上ではほぼ必ず発言者はTARGETなので問題ないが内部処理で迂闊に省略するとバグが発生する事がある


