開発向けの情報をいろいろ書いたりします
思いついたことから適当に書いていくのでたぶんまとまりがありません

・曜日について
1.17で同志のQhrTea氏が曜日システムを作ってくれました。感謝
SHOP画面に入るたび曜日に対応した数字がFLAG:曜日に代入されてます(1:日,2:月,3:火,4:水,5:木,6:金,0:土)
式中関数「DOW」に数字を通すと何曜日なのかを1文字で返してくれます(日、水、木 など)

例文----------------------------------------
PRINTFORMW 「今日は%DOW(FLAG:曜日)%曜日だね～」

SELECTCASE DOW(FLAG:曜日)
	CASE "日"
		PRINTW 「せっかくの休みなんだし僕とイイコトしない？」
	CASE "土"
		PRINTW 「明日は休日だし夜遅くまで楽しんでも……いいよね？」
	CASE "金"
		PRINTW 「1週間お疲れ様。僕が癒してあげるね♪」
	CASEELSE
		PRINTW 「平日は忙しくて大変だね」
ENDSELECT
--------------------------------------------

・曜日システムに付属する式中関数「NO_WEEK」と「NO_DOW」
NO_WEEKは指定した年月日がその月の何週目なのかを返す式中関数です
省略すると今日の結果を返します

例文----------------------------------------
IF %DOW(FLAG:曜日)% == "日"
	PRINTFORMW 「今月ももう{NO_WEEK()}週間目だね」
	SELECTCASE NO_WEEK()
		;4週目、5週目、6週目
		CASE 4, 5, 6
			PRINTFORMW 「{MONTH}月もあとちょっとで終わるよ。頑張ろうね」
		;3週目
		CASE 3
			PRINTFORMW 「{MONTH}月も折り返し地点かぁ。早いね」
		;1週目、2週目
		CASE 1, 2
			PRINTFORMW 「{MONTH}月はまだ始まったばかり。今月は何を目標にしよっか」
	ENDSELECT
ENDIF
--------------------------------------------

NO_DOWは指定した第何何曜日を返す式中関数です
第三引数以降を省略すると今月の結果を返します
第二引数の曜日は""で括り、文字列で入力してください("火"、"土"など)

例文----------------------------------------
PRINTW 「近所に、毎月第3水曜日にパセリ半額になるゲームセンターがあるらしい……」
IF DAYS == NO_DOW(3, "水")
	PRINTFORMW 「よく考えたら今日だった！ 一緒に行こう？」
ELSEIF DAYS < NO_DOW(3, "水")
	PRINTFORMW 「今月は%NO_DOW(3, "水")%日かぁ。カレンダーに書いとこ」
ELSEIF DAYS > NO_DOW(3, "水")
	IF MONTH == 12
		PRINTFORMW 「今年だけのイベントらしいから、もう無理だね……」
	ELSE
		PRINTFORMW 「今月はもう終わったから来月……来月は%NO_DOW(3, "水", MONTH+1)%日みたい」
	ENDIF
ENDIF
--------------------------------------------

・「LOOPRES」とは？
REPEAT系命令DO～LOOPを選択肢のある場面で気軽に使えるようにするための式中関数です
LOOPの引数が1の場合はBREAKとかRETURNとかしない限り無限にループしてしまうので、
LOOPRES(0, 1)みたいに書くと、0か1が入力されれば0を返されてループ抜けることになります

例文----------------------------------------
PRINTL ルシェの性別は……
PRINTL [0] - 男の子
PRINTL [1] - 男の娘
DO
	INPUT
	SELECTCASE
		CASE 0
			PRINTL もちろんそうだよね！
		CASE 1
			PRINTL やっぱりそうだよね！
	ENDSELECT
LOOP LOOPRES(0, 1)

PRINTL 君はわかってるね
--------------------------------------------

こんな感じで使います。「BREAKでいいだろボケ」って思うかもしれませんが、お好きなほうをお使いください
ていうかGOTO使うよりDO～LOOP使ったほうが絶対見た目も綺麗だし管理も楽だと思うんだけどなぁ


・特殊なキャラマニュアルについて
キャラマニュアル表示の際、ウェイトや色変えなどを用いた表示をしたい場合は、キャラCSVにはCSVを書かずに、
ERB\キャラ購入画面\キャラマニュアル.ERBに直接書くといいでしょう
「ちょっと変わったマニュアル書いたから実装して！」って言って上記ERBと一緒に投げてもらえれば実装します


・エンディング増やそうぜ
エンディングは過去に一通り揃えるためにわるさー氏が書いて以来まったく手を付けていません
Enterもエンディング等を書くのがとても苦手なため、エンディング条件と文章を投げてくれれば実装させていただきます


・ABL上昇処理がよくわからん
Emueraのフローに則った作りをしています。Emuera公式ページからABLUPのフロー図を見ておくといいかも？
以下開発スレからコピペ
＞ABL_全般.ERBでABL一覧を表示する→NEED_JUEL{ABL番号}関数で各ABLの増減に必要な珠の数や経験を取得する→
＞CHECK_JUEL{ABL番号}関数で条件を満たしているか確認、満たしてなければ灰色表示、満たしてれば青色表示→
＞増減したいABLを選ぶとABLUP{ABL番号}関数内で再度NEED_JUELとCHECK_JUELから確認が行われた後に、珠を消費してABLの増減を行う
＞という処理になっています。Emueraのフロー内でワンクリック上昇を行うための処理ですが、もっと分かりやすい書き方があるかも？


・変数名とか関数名とか
変数や関数にはなるべく用途が分かりやすい名前を付けているつもりですが、英語と日本語が混在してたりもします
CSVで名称を設定出来るものには必ず名前を付けて使ってください。マジックナンバーが蔓延ると後々酷い目に遭う
関数名は、いろんな場所から呼ばれる汎用的な関数はできるだけ英語表記にしてもらいたいなぁ……「性器露出」とかいう式中関数があるけど


・タイトル画面で出てくる下品な改変ネタはなんなの？
いわゆるサブタイというやつです。音ゲー関連のコピペや名台詞迷台詞をアレな感じに改変してぶっこんでます
こんな小さなところでもネタは多いに越したことはないので、みなさんのネタをお待ちしております


・Enterの野郎が書いた口上にテンプレには無かったファイルがあるんだけど説明しやがれコノヤロウ
ERHファイルは自分でセーブ可能な変数を作成するときなどに使います。変数名が重複しない限りは、
いくら好き勝手に設定しても大丈夫なので、口上書くときには積極的に使うとよいでしょう。便利ですよ
2016年10月現在、天土口上とモード口上には独自のイベントを作るためにシステム関数を使っています
システム関数について詳しくはEmuera公式ページをご覧ください
ERB上にある同名のシステム関数が全部呼び出されるので、属性でLATER(他関数より後に実行する)等を付けることにより、
口上テンプレ内では実装できなかったイベントや処理を無理やり突っ込んでいます
この手法を使う場合は、条件をちゃんと指定して、他口上等を使用してるときに呼び出されても支障が無い書き方をしましょう


・コマンド追加の方法
コマンドを追加するには
その1 - CSV\Train.csvにコマンド番号とコマンド名を追記する
その2 - ERB\調教コマンド\COMF フォルダに、対応したERBを作成します(COMF[コマンド番号]_[コマンド名].ERB)
その3 - ERB内容は趣旨が似たような他コマンドのERBをコピペして適当に調整してください
　　　　なおコマンドERB内で、必ず書かなければいけない命令、関数がいくつかあります。実際のERBを参考に読んで下さい
　　　　
　　　　@USERCOM_ABLE[コマンド番号]
　　　　└調教中のコマンド一覧に表示するための条件です。これを通らなければそもそも表示されません
　　　　　特定のアイテムが必要な場合、竿役が必要な場合などはここで条件を設定しておきましょう
　　　　　RETURN 1で表示、RETURN 0で非表示になります
　　　　
　　　　@実行判定[コマンド番号]
　　　　└上記とは違い、コマンド一覧に表示されたあと、状況によって拒否られたりするアレの条件です
　　　　　素質や能力で増減する値によって成否が決まります。それっぽく設定してください
　　　　
　　　　@COM[コマンド番号]
　　　　└コマンドを実行した場合の処理です。コマンド名をPRINTLしてから「KOJO_MESSAGE_COM」を呼んでください
　　　　　実行判定[コマンド番号]関数を設定した場合は、「KOJO_~」関数を呼び出す前に
　　　　　----------------------------
　　　　　CALL 実行判定[コマンド番号]
　　　　　SIF !RESULT
　　　　　	RETURN 0
　　　　　----------------------------
　　　　　も入れておきましょう
　　　　
　　　　絶頂チェック
　　　　└ソース処理が一通り終わったら「SOURCE_CHECK_CVAB」を呼び出します
　　　　　絶頂系の処理を先に行わないと都合が悪いので入れといてください
　　　　
　　　　射精チェック
　　　　└主人の射精と奴隷の射精、及び助手の射精をチェックします
　　　　　----------------------------
　　　　　CALL SAMEN_CHECK, [射精先]
　　　　　CALL SAMEN_CHECK_T, [射精先]

　　　　　CALL SAMEN_SHOOT, [射精先], NOWEX:PLAYER:射精
　　　　　CALL SAMEN_SHOOT_T, [射精先], NOWEX:射精
　　　　　----------------------------
　　　　　みたいな記述になっています。助手の射精とかだともっと別の書き方がありますが、まぁそれは他のERB見てください
　　　　　ERB\調教コマンド\射精,噴乳処理_奴隷.ERB 及び 同フォルダ内の射精処理_実行者.ERB内に関数がありますので、
　　　　　それ見て射精先を数字で指定してください。中出しだったら1、口に出すなら4など
　　　　　なお、ちんこ弄らんコマンドでも、オナホなどの装備で射精する場合がありますので、
　　　　　全てのコマンドに射精先を0に設定して上記のCALL文を書いておきましょう
　　　　　
　　　　経験の処理
　　　　└「EXPUP」関数は,(半角カンマ)で区切ってふたつの数字を入力することにより、自動で経験を加算してくれます
　　　　　ひとつめの数字が同性愛経験、ふたつめの数字が主人もしくは助手から調教を受けた経験の増加量になります
　　　　　たとえば「CALL EXPUP, 2, 1」と入力すると、PLAYERとTARGETが同性だった場合に同性愛経験が2増えて、
　　　　　PLAYERが主人の場合は主人調教経験が、PLAYERが助手の場合は助手調教経験が1増えます
　　　　　なお、ひとつめの数字は異性の場合は加算されませんので、お好きなように設定してください
　　　　
　　　　最後
　　　　└最後は必ずRETURN 1で終了してください。これが無いとコマンドが実行されてないと判断されるためです
　　　　
　　　　道具装備系コマンドの場合
　　　　└上記RETURN 1の下に新しく@EQUIP_COM[コマンド番号]関数を作成してください
　　　　　PRINTLで＜◯◯装備中＞みたいな文を書いたあとにソース追加処理を行ってください
　　　　　なお、ここで「SOURCE_CHECK_CVAB」を呼び出すと無限ループするので気をつけましょう
　　　　　そして最後にERB\調教コマンド\ソース補正.ERBの@EQUIP_CHECK内で当関数を呼び出すように設定すれば、
　　　　　装備中のソース追加が反映されます
　　　　
　　　　ツールチップ表示のための仕上げ
　　　　└上記の手順で既にコマンドの追加は出来ていますが、
　　　　　当バリアントではマウスポインタ合わせると表示されるツールチップ表示を随所に盛り込んでいます
　　　　　コマンド一覧もそのひとつで、これを表示するためにはERB\調教コマンド\コマンド表示.ERBを弄る必要があります
　　　　　開くとすぐにテンプレート部分があるはずなので、他のコマンドを参考に書いてください
その4 - 起動して遊んじゃおう！（またの名をテストプレイという）

なんかすっげえ長文になった。めんどくせえ
写真内容も弄る必要があるけど……これはいいや……


・実績について
実績を追加する際には、CSVフォルダ内のGlobal.csvに実績名を書いて、ERB\システム\アチーブメント.ERBを、
既存のコードを参考にしながら実績名と解除条件を記入する
その条件を達成した時の処理は

例文----------------------------------------
IF 条件式
	CALL 実績解除, "実績名"
ENDIF
--------------------------------------------
SIF 条件式
	CALL 実績解除, "実績名"
--------------------------------------------

のように書くことで実績解除できる


・通貨単位について
Ver.2.02から画像によるパセリ表示に対応
しかし、画像表示は従来のPRINTと比べるとかなり使い方に癖があり、普通に書くと画像表示をするコードは、
たとえ一行で表示するものだろうと数行に跨いで書かなければならない。
なので、表示用の関数に引数として一行を放り込むことで、SPLIT命令で分割して適切に表示してくれる。
代替文字は「＄(全角ドル記号)」。ここがパセリや任意の単位に変換されて表示される

例文----------------------------------------
CALL PASELIL, @"現在の通貨単位は「＄」です"
--------------------------------------------

と書くことで「現在の通貨単位は「(パセリや任意の通貨単位)」です」と表示されます。
ちなみにこの関数にはPASELI、PASELIL、PASELIW、PASELIPLAINとあって、それぞれPRINT、PRINTL、PRINTW、PRINTPLAINと同じ挙動をします


・関数「PAGING」について
条件に一致するキャラをページ形式で表示する関数。1ページに10人表示する
[1000] 戻るを選んだ場合はRETURN -1するのでRESULTに-1が入ります
FOR-NEXT命令と合わせてご利用ください。使い方は以下の通り

--------------------------------------------
FOR PAGING, 0, CHARANUM ;←表示するキャラの範囲 この範囲外のキャラはどうあがいても表示されない
	CALL PAGING, (条件式), (追加情報), (ページ名), (終了表記), (使用不可も表示)
NEXT
--------------------------------------------

COUNTやLCOUNTの代わりに専用変数「PAGING」を用いてます。関数@PAGING内で理想の処理をするため
追加情報以降は省略も可能

条件式
├CHARANUM通してループしてる通り、キャラ変数を用いて条件式を指定するのが一般的な使い方になります
├あまりにも長い条件式で見づらくなったり、一行で表せない条件式などは、
└事前にLOCAL等を用いてフラグを立てておくといいでしょう。PAGINGと同じ値のキャラを表示するため、条件さえ抜ければ大丈夫

例文----------------------------------------
;女で、巨乳以上、種族が獣人、処女のうち2つ以上の条件を満たしている、もしくは男で人間か童貞のキャラを表示する場合
FOR PAGING, 0, CHARANUM
	LOCAL = 0
	SELECTCASE SEX(PAGING)
		CASE 1
			SIF CSTR:PAGING:種族 == "人間" || TALENT:PAGING:童貞
				LOCAL = 2
		CASE 2
			SIF TALENT:PAGING:バストサイズ >= 4
				LOCAL++
			SIF CSTR:PAGING:種族 == "獣人"
				LOCAL++
			SIF TALENT:PAGING:処女
				LOCAL++
	ENDSELECT
	CALL PAGING, LOCAL >= 2
NEXT
--------------------------------------------

追加情報
├キャラの名前の後に追加で表示したい情報を指定してください。デフォルトでは性別のみ表示されます
└なお、よほどのことがない限り「@""」を用いた書式付文字列で指定するのがいいと思います


例文----------------------------------------
PRINTL □キャラを表示します
FOR PAGING, 0, CHARANUM
	CALL PAGING, 1, @"%CSTR:PAGING:種族% \@ CFLAG:PAGING:陥落 ? 陥落済み #  \@"
NEXT
結果----------------------------------------
□キャラを表示します
　[ 0] - あなた　　　　♂ 人間
　[ 1] - 寿々姫　　　　♀ 人間 陥落済み
　[ 2] - ルシェ　　　　♂ 悪魔
　[ 3] - キュベリア　　♀ 神 陥落済み
--------------------------------------------

ページ名
└左下に表示するページ名を指定できます。デフォルトでは「PAGE.{ページ数}」といった感じでページ数を表示

例文----------------------------------------
PRINTL □キャラを表示します
FOR PAGING, 0, CHARANUM
	CALL PAGING, 1, @"%CSTR:PAGING:種族% \@ CFLAG:PAGING:陥落 ? 陥落済み #  \@", "キャラ一覧"
NEXT
結果----------------------------------------
□キャラを表示します
　[ 0] - あなた　　　　♂ 人間
　[ 1] - 寿々姫　　　　♀ 人間 陥落済み
　[ 2] - ルシェ　　　　♂ 悪魔
　[ 3] - キュベリア　　♀ 神 陥落済み
(DRAWLINE省略)
　キャラ一覧　　　　　　[1000] やめる
--------------------------------------------

終了表記
└上記の「[1000] やめる」の表記を変更することができます。デフォルトは見ての通り

例文----------------------------------------
PRINTL □キャラを表示します
FOR PAGING, 0, CHARANUM
	CALL PAGING, 1, @"%CSTR:PAGING:種族% \@ CFLAG:PAGING:陥落 ? 陥落済み #  \@", "キャラ一覧", "SHOPに戻る"
NEXT
結果----------------------------------------
□キャラを表示します
　[ 0] - あなた　　　　♂ 人間
　[ 1] - 寿々姫　　　　♀ 人間 陥落済み
　[ 2] - ルシェ　　　　♂ 悪魔
　[ 3] - キュベリア　　♀ 神 陥落済み
(DRAWLINE省略)
　キャラ一覧　　　　　　[1000] SHOPに戻る
--------------------------------------------

使用不可も表示
└使用不可フラグが立っているキャラを表示するかどうかを設定できます。1=表示する 0=表示しない。デフォルトでは0です

・口上側でのコマンド制御「DISABLE」について
口上側でコマンドの実行可/不可を強制的に変更することが可能です。COMABLEの範囲内ですのでパラメータが低いと断られることはあります
書式は簡単で、例えば
例文----------------------------------------
@DISABLE_愛撫_リリーゼ
COMRESULT = 0
--------------------------------------------
と口上内に書いておけばリリーゼへの愛撫は実行不可となります。そのコマンド関数の上あたりに書いておくと分かりやすいかな
もちろん条件を指定することも可能です
例文----------------------------------------
@DISABLE_愛撫_リリーゼ
SIF TALENT:性別 == 1
	COMRESULT = 0
--------------------------------------------
と書くことで、リリーゼが男になってしまった場合に愛撫を実行できなくなります
好きなシチュエーションでの口上制作に特化したい場合などにお使いください
逆に関数内でCOMRESULTを1にすることで強制的に実行可能にすることができますが、
エラーになる可能性が非常に高いため、よく検証してから利用してください（ペニスの無い女性が射精するなど）

・ERB側でのコマンド指定変数「コマンド強制」
かつてのNEXTCOMやDOTRAINに似た挙動をします
NEXTCOMのように本体側で推奨されてないほど不安定でもなく、
DOTRAINほどの制約もなく、フローに則った挙動を行います
初期値は-1で、コマンド番号を代入することで次のコマンド選択時に自動で入力されます
GETNUMを使用してうまいこと活用してください。実行後は値は初期値に戻ります


・eraBEMANIのフロー図について
TRAIN関係----------------------------------------
BEGIN TRAIN
↓
@EVENTTRAIN(下記EVENTUSERTRAINを呼び出すだけ)
↓
@EVENTUSERTRAIN(CALL可能関数)
│↓
│@CVAR_RESET(BEGIN TRAINで行われる変数初期化処理 GOTJUEL、TEQUIP等)
↓↓
@SHOW_STATUS(CALL可能関数)
↓
※Emueraで行われるCOM_ABLE参照は行わない 下記SHOW_USERCOM内でコマンド表示
↓
@SHOW_USERCOM(CALL可能関数)
│↓
│@SHOW_USERCOM内でEmueraのフロー同等にUP、DOWN、LOSEBASE及びDOWNBASEの初期化を行う
↓↓
INPUT(入力待ち Emueraのフローで行われる)
↓
@USERCOM(CALL可能)
│↓
│入力されたコマンドの実行判定、存在判定など 判定失敗で0を返す
││↓1(判定が通った場合)
││@TVAR_RESET(NOWEX、TFLAG:100以下のリセットを行う)
││ほぼ同じタイミングでSELECTCOM、SELECTCOMSにコマンドを代入
││↓
││@COMXX(CALL可能 コマンドが実行されると1、実行できなければ0を返す
│├┘↓1(コマンドが実行された場合)
││　@SOURCE_CHECK(CALL可能 体力気力PALAMの処理)
││　↓
││　SOURCE初期化
││　↓
││　※Emueraで行われるEVENTCOMENDの呼び出しは行わない 下記EVENTUSERCOMENDで代用する
││　↓
││　@EVENTUSERCOMEND(体力切れなどでの調教終了を行う)
↓↓　↓└上級売春以外は体力切れ等でBEGIN AFTERTRAIN 上級売春では満足度に応じて終了
@SHOW_STATUSに戻る
--------------------------------------------------

上記のフローをBEGIN TRAINを介さず再現するには
例文----------------------------------------
CALL EVENTUSERTRAIN
DO
	CALL SHOW_STATUS
	CALL SHOW_USERCOM
	INPUT
	CALL USERCOM
LOOP TFLAG:調教終了 == 0
--------------------------------------------
となる 仕様上、BEGIN AFTERTRAIN後にループも正常に終了させる必要がある

